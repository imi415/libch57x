/*
 * Copyright (c) 2009-2019 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     /home/imi415/Tmp/CMSIS/CMSIS/Utilities/Linux64//CH579SFR.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     07. April 2023
 * @note     Generated by SVDConv V3.3.42 on Friday, 07.04.2023 22:49:20
 *           from File '/home/imi415/Documents/Hardwares/WCH_Projects/SDK/CH57x_SDK/EVT/PUB/CMSIS/SVD/CH579SFR.svd',
 */



/** @addtogroup WCH Ltd.
  * @{
  */


/** @addtogroup CH579SFR
  * @{
  */


#ifndef CH579SFR_H
#define CH579SFR_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  CH579SFR Specific Interrupt Numbers  ========================================== */
  TMR0_IRQn                 =   0,              /*!< 0  TMR0_IRQHandler                                                        */
  GPIO_IRQn                 =   1,              /*!< 1  GPIO_IRQHandler                                                        */
  SLAVE_IRQn                =   2,              /*!< 2  SLAVE_IRQHandler                                                       */
  SPI0_IRQn                 =   3,              /*!< 3  SPI0_IRQHandler                                                        */
  BB_IRQn                   =   4,              /*!< 4  BB_IRQHandler                                                          */
  LLE_IRQn                  =   5,              /*!< 5  LLE_IRQHandler                                                         */
  USB_IRQn                  =   6,              /*!< 6  USB_IRQHandler                                                         */
  ETH_IRQn                  =   7,              /*!< 7  ETH_IRQHandler                                                         */
  TMR1_IRQn                 =   8,              /*!< 8  TMR1_IRQHandler                                                        */
  TMR2_IRQn                 =   9,              /*!< 9  TMR2_IRQHandler                                                        */
  UART0_IRQn                =  10,              /*!< 10 UART0_IRQHandler                                                       */
  UART1_IRQn                =  11,              /*!< 11 UART1_IRQHandler                                                       */
  RTC_IRQn                  =  12,              /*!< 12 RTC_IRQHandler                                                         */
  ADC_IRQn                  =  13,              /*!< 13 ADC_IRQHandler                                                         */
  SPI1_IRQn                 =  14,              /*!< 14 SPI1_IRQHandler                                                        */
  LED_IRQn                  =  15,              /*!< 15 LED_IRQHandler                                                         */
  TMR3_IRQn                 =  16,              /*!< 16 TMR3_IRQHandler                                                        */
  UART2_IRQn                =  17,              /*!< 17 UART1_IRQHandler                                                       */
  UART3_IRQn                =  18,              /*!< 18 UART3_IRQHandler                                                       */
  WDOG_BAT_IRQn             =  19               /*!< 19 WDT_IRQHandler                                                         */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M0 Processor and Core Peripherals  =========================== */
#define __CM0_REV                 0x0000U       /*!< CM0 Core Revision                                                         */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  0        /*!< MPU present                                                               */
#define __FPU_PRESENT                  0        /*!< FPU present                                                               */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0.h"                           /*!< ARM Cortex-M0 processor and core peripherals                              */
#include "system_ch57x.h"                       /*!< CH579SFR System                                                           */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            SYS                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief System Control Register (SYS)
  */

typedef struct {                                /*!< (@ 0x40001000) SYS Structure                                              */
  __IM  uint32_t  RESERVED[2];
  __IOM uint16_t  R16_CLK_SYS_CFG;              /*!< (@ 0x00000008) RWA, system clock configuration, SAM                       */
  __IOM uint8_t   R8_HFCK_PWR_CTRL;             /*!< (@ 0x0000000A) RWA, high frequency clock module power control,
                                                                    SAM                                                        */
  __IM  uint8_t   RESERVED1;
  __IOM uint8_t   R8_SLP_CLK_OFF0;              /*!< (@ 0x0000000C) RWA, sleep clock off control byte 0, SAM                   */
  __IOM uint8_t   R8_SLP_CLK_OFF1;              /*!< (@ 0x0000000D) RWA, sleep clock off control byte 1, SAM                   */
  __IOM uint8_t   R8_SLP_WAKE_CTRL;             /*!< (@ 0x0000000E) RWA, wake control, SAM                                     */
  __IOM uint8_t   R8_SLP_POWER_CTRL;            /*!< (@ 0x0000000F) RWA, peripherals power down control, SAM                   */
  __IM  uint32_t  RESERVED2[2];
  __IOM uint16_t  R16_PIN_ALTERNATE;            /*!< (@ 0x00000018) RW, function pin alternate configuration                   */
  __IOM uint16_t  R16_PIN_ANALOG_IE;            /*!< (@ 0x0000001A) RW, analog pin enable and digital input disable            */
  __IOM uint8_t   R8_SLV_CONFIG;                /*!< (@ 0x0000001C) RW, parallel slave configuration                           */
  __IM  uint8_t   RESERVED3;
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  R16_POWER_PLAN;               /*!< (@ 0x00000020) RWA, power plan before sleep instruction, SAM              */
  __IOM uint8_t   R8_AUX_POWER_ADJ;             /*!< (@ 0x00000022) RWA, aux power adjust control, SAM                         */
  __IM  uint8_t   RESERVED5;
  __IOM uint8_t   R8_BAT_DET_CTRL;              /*!< (@ 0x00000024) RWA, battery voltage detector control, SAM                 */
  __IOM uint8_t   R8_BAT_DET_CFG;               /*!< (@ 0x00000025) RWA, battery voltage detector configuration,
                                                                    SAM                                                        */
  __IM  uint8_t   R8_BAT_STATUS;                /*!< (@ 0x00000026) RO, battery status                                         */
  __IM  uint8_t   RESERVED6;
  __IM  uint32_t  RESERVED7;
  __IOM uint16_t  R16_INT32K_TUNE;              /*!< (@ 0x0000002C) RWA, internal 32KHz oscillator tune control,
                                                                    SAM                                                        */
  __IOM uint8_t   R8_XT32K_TUNE;                /*!< (@ 0x0000002E) RWA, external 32KHz oscillator tune control,
                                                                    SAM                                                        */
  __IOM uint8_t   R8_CK32K_CONFIG;              /*!< (@ 0x0000002F) RWA, 32KHz oscillator configure                            */
  __IOM uint8_t   R8_RTC_FLAG_CTRL;             /*!< (@ 0x00000030) RW, RTC flag and clear control                             */
  __IOM uint8_t   R8_RTC_MODE_CTRL;             /*!< (@ 0x00000031) RWA, RTC mode control, SAM                                 */
  __IM  uint16_t  RESERVED8;
  __IOM uint32_t  R32_RTC_TRIG;                 /*!< (@ 0x00000034) RWA, RTC trigger value, SAM                                */
  __IM  uint16_t  R16_RTC_CNT_32K;              /*!< (@ 0x00000038) RO, RTC count based 32KHz                                  */
  __IM  uint16_t  R16_RTC_CNT_2S;               /*!< (@ 0x0000003A) RO, RTC count based 2 second                               */
  __IM  uint32_t  R32_RTC_CNT_DAY;              /*!< (@ 0x0000003C) RO, RTC count based one day, only low 14 bit               */
  
  union {
    __IM  uint8_t R8_SAFE_ACCESS_SIG_RD;        /*!< (@ 0x00000040) R8_SAFE_ACCESS_SIG_RD Register safe accessing              */
    __OM  uint8_t R8_SAFE_ACCESS_SIG_WR;        /*!< (@ 0x00000040) safe accessing sign register, must write 0x57
                                                                    then 0xA8 to enter safe accessing mode                     */
  };
  __IM  uint8_t   R8_CHIP_ID;                   /*!< (@ 0x00000041) RF, chip ID register, always is ID_CH57*                   */
  __IM  uint8_t   R8_SAFE_ACCESS_ID;            /*!< (@ 0x00000042) RF, safe accessing ID register, always 0x04                */
  __IOM uint8_t   R8_WDOG_COUNT;                /*!< (@ 0x00000043) RW, watch-dog count, count by clock frequency
                                                                    Fsys/131072                                                */
  __IOM uint8_t   R8_RESET_STATUS;              /*!< (@ 0x00000044) RWA, reset status, SAM                                     */
  __IM  uint8_t   R8_GLOB_CFG_INFO;             /*!< (@ 0x00000045) RO, global configuration information and status            */
  __IOM uint8_t   R8_RST_WDOG_CTRL;             /*!< (@ 0x00000046) RWA, reset and watch-dog control, SAM                      */
  __IOM uint8_t   R8_GLOB_RESET_KEEP;           /*!< (@ 0x00000047) RW, value keeper during global reset                       */
  __IM  uint16_t  RESERVED9;
  __IOM uint8_t   R8_CFG_FLASH;                 /*!< (@ 0x0000004A) RWA, Flash ROM configure register                          */
  __IOM uint8_t   R8_PLL_CONFIG;                /*!< (@ 0x0000004B) RWA, PLL configuration control, SAM                        */
  __IOM uint16_t  R16_INT32M_CALIB;             /*!< (@ 0x0000004C) RWA, internal 32MHz oscillator tune control,
                                                                    SAM                                                        */
  __IOM uint8_t   R8_XT32M_TUNE;                /*!< (@ 0x0000004E) RWA, external 32MHz oscillator tune control,
                                                                    SAM                                                        */
  __IM  uint8_t   RESERVED10;
  __IM  uint16_t  R16_OSC_CAL_CNT;              /*!< (@ 0x00000050) RO, system clock count value for 32KHz 5 cycles            */
  __IOM uint8_t   R8_OSC_CAL_CTRL;              /*!< (@ 0x00000052) RWA, oscillator frequency calibration control,
                                                                    SAM                                                        */
  __IM  uint8_t   RESERVED11;
  __IM  uint32_t  RESERVED12;
  __IOM uint8_t   R8_ADC_CHANNEL;               /*!< (@ 0x00000058) RW, ADC input channel selection                            */
  __IOM uint8_t   R8_ADC_CFG;                   /*!< (@ 0x00000059) RW, ADC configure                                          */
  __IOM uint8_t   R8_ADC_CONVERT;               /*!< (@ 0x0000005A) RW, ADC convert control                                    */
  __IOM uint8_t   R8_TEM_SENSOR;                /*!< (@ 0x0000005B) RW, temperature sensor control                             */
  __IM  uint16_t  R16_ADC_DATA;                 /*!< (@ 0x0000005C) RO, ADC data                                               */
  __IM  uint8_t   R8_ADC_INT_FLAG;              /*!< (@ 0x0000005E) RO, ADC interrupt flag register                            */
  __OM  uint8_t   R8_TKEY_CNT;                  /*!< (@ 0x0000005F) WO, Touch-key charge and discharge count                   */
  __IM  uint32_t  RESERVED13[12];
  __IOM uint16_t  R16_PA_INT_EN;                /*!< (@ 0x00000090) RW, GPIO PA interrupt enable                               */
  __IOM uint16_t  R16_PB_INT_EN;                /*!< (@ 0x00000092) RW, GPIO PB interrupt enable                               */
  __IOM uint16_t  R16_PA_INT_MODE;              /*!< (@ 0x00000094) RW, GPIO PA interrupt mode: 0=level action, 1=edge
                                                                    action                                                     */
  
  union {
    __IOM uint16_t R16_PB_INT_MODE__R8_SLV_RD_STAT;/*!< (@ 0x00000096) RW, GPIO PB interrupt mode: 0=level action, 1=edge
                                                                    action;RW, status for parallel slave read                  */
    
    struct {
      __IM  uint8_t RESERVED14;
      __IOM uint8_t R8_SLV_WR_DATA;             /*!< (@ 0x00000097) RW, data or command from parallel slave write              */
    };
  };
  __IM  uint32_t  RESERVED15;
  __IOM uint16_t  R16_PA_INT_IF;                /*!< (@ 0x0000009C) RW1, GPIO PA interrupt flag                                */
  __IOM uint16_t  R16_PB_INT_IF;                /*!< (@ 0x0000009E) RW1, GPIO PB interrupt flag                                */
  __IOM uint32_t  R32_PA_DIR;                   /*!< (@ 0x000000A0) RW, GPIO PA I/O direction: 0=in, 1=out                     */
  __IM  uint32_t  R32_PA_PIN;                   /*!< (@ 0x000000A4) RO, GPIO PA input                                          */
  __IOM uint32_t  R32_PA_OUT;                   /*!< (@ 0x000000A8) RW, GPIO PA output                                         */
  __IOM uint32_t  R32_PA_CLR;                   /*!< (@ 0x000000AC) WZ, GPIO PA clear output: 0=keep, 1=clear                  */
  __IOM uint32_t  R32_PA_PU;                    /*!< (@ 0x000000B0) RW, GPIO PA pullup resistance enable                       */
  __IOM uint32_t  R32_PA_PD_DRV;                /*!< (@ 0x000000B4) RW, PA pulldown for input or PA driving capability
                                                                    for output                                                 */
  __IM  uint32_t  RESERVED16[2];
  __IOM uint32_t  R32_PB_DIR;                   /*!< (@ 0x000000C0) RW, GPIO PB I/O direction: 0=in, 1=out                     */
  __IM  uint32_t  R32_PB_PIN;                   /*!< (@ 0x000000C4) RO, GPIO PB input                                          */
  __IOM uint32_t  R32_PB_OUT__R8_SLV_RD_DATA;   /*!< (@ 0x000000C8) RW, GPIO PB output;RW, data for parallel slave
                                                                    read                                                       */
  __IOM uint32_t  R32_PB_CLR;                   /*!< (@ 0x000000CC) WZ, GPIO PB clear output: 0=keep, 1=clear                  */
  __IOM uint32_t  R32_PB_PU;                    /*!< (@ 0x000000D0) RW, GPIO PB pullup resistance enable                       */
  __IOM uint32_t  R32_PB_PD_DRV;                /*!< (@ 0x000000D4) RW, PB pulldown for input or PB driving capability
                                                                    for output                                                 */
} SYS_Type;                                     /*!< Size = 216 (0xd8)                                                         */



/* =========================================================================================================================== */
/* ================                                           FLASH                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Flash ROM control register (FLASH)
  */

typedef struct {                                /*!< (@ 0x40001800) FLASH Structure                                            */
  __IOM uint32_t  R32_FLASH_DATA;               /*!< (@ 0x00000000) RW, Flash ROM data                                         */
  __IOM uint32_t  R32_FLASH_ADDR;               /*!< (@ 0x00000004) RW, Flash ROM address                                      */
  __OM  uint8_t   R8_FLASH_COMMAND;             /*!< (@ 0x00000008) WO, Flash ROM operation command                            */
  __IOM uint8_t   R8_FLASH_PROTECT;             /*!< (@ 0x00000009) RW, Flash ROM protect control                              */
  __IM  uint16_t  R16_FLASH_STATUS;             /*!< (@ 0x0000000A) RO, Flash ROM operation status                             */
} FLASH_Type;                                   /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           TMR                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer register (TMR)
  */

typedef struct {                                /*!< (@ 0x00000000) TMR Structure                                              */
  __IOM uint8_t   CTRL_MOD;                     /*!< (@ 0x00000000) RW, TMR1 mode control                                      */
  __IOM uint8_t   CTRL_DMA;                     /*!< (@ 0x00000001) RW, TMR1 DMA control                                       */
  __IOM uint8_t   INTER_EN;                     /*!< (@ 0x00000002) RW, TMR1 interrupt enable                                  */
  __IM  uint8_t   RESERVED;
  __IM  uint16_t  RESERVED1;
  __IOM uint8_t   INT_FLAG;                     /*!< (@ 0x00000006) RW1, TMR interrupt flag                                    */
  __IM  uint8_t   FIFO_COUNT;                   /*!< (@ 0x00000007) RO, TMR FIFO count status                                  */
  __IM  uint32_t  COUNT;                        /*!< (@ 0x00000008) RO, TMR current count                                      */
  __IOM uint32_t  CNT_END;                      /*!< (@ 0x0000000C) RW, TMR end count value, only low 26 bit                   */
  
  union {
    __IM  uint32_t FIFO_RO;                     /*!< (@ 0x00000010) RO, TMR FIFO register, only low 26 bit                     */
    __OM  uint32_t FIFO_WO;                     /*!< (@ 0x00000010) WO, TMR FIFO register, only low 26 bit                     */
  };
  __IM  uint16_t  DMA_NOW;                      /*!< (@ 0x00000014) RO, TMR DMA current address                                */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  DMA_BEG;                      /*!< (@ 0x00000018) RW, TMR DMA begin address                                  */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  DMA_END;                      /*!< (@ 0x0000001C) RW, TMR DMA end address                                    */
  __IM  uint16_t  RESERVED4;
} TMR_Type;                                     /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief UART register (UART)
  */

typedef struct {                                /*!< (@ 0x00000000) UART Structure                                             */
  __IOM uint8_t   MCR;                          /*!< (@ 0x00000000) RW, UART modem control                                     */
  __IOM uint8_t   IER;                          /*!< (@ 0x00000001) RW, UART interrupt enable                                  */
  __IOM uint8_t   FCR;                          /*!< (@ 0x00000002) RW, UART FIFO control                                      */
  __IOM uint8_t   LCR;                          /*!< (@ 0x00000003) RW, UART line control                                      */
  __IM  uint8_t   IIR;                          /*!< (@ 0x00000004) RO, UART interrupt identification                          */
  __IM  uint8_t   LSR;                          /*!< (@ 0x00000005) RO, UART line status                                       */
  __IM  uint8_t   MSR;                          /*!< (@ 0x00000006) RO, UART modem status                                      */
  __IM  uint8_t  RESERVED;
  
  union {
    __IM  uint8_t RBR;                          /*!< (@ 0x00000008) RO, UART receiver buffer, receiving byte                   */
    __OM  uint8_t THR;                          /*!< (@ 0x00000008) WO, UART transmitter holding, transmittal byte             */
  };
  __IM  uint8_t   RESERVED1;
  __IM  uint8_t   RFC;                          /*!< (@ 0x0000000A) RO, UART receiver FIFO count                               */
  __IM  uint8_t   TFC;                          /*!< (@ 0x0000000B) RO, UART transmitter FIFO count                            */
  __IOM uint16_t  DL;                           /*!< (@ 0x0000000C) RW, UART divisor latch                                     */
  __IOM uint8_t   DIV;                          /*!< (@ 0x0000000E) RW, UART pre-divisor latch byte, only low 7
                                                                    bit, from 1 to 0/128                                       */
  __IOM uint8_t   ADR;                          /*!< (@ 0x0000000F) RW, UART slave address: 0xFF=disable, other=enable         */
} UART_Type;                                    /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI0 register (SPI0)
  */

typedef struct {                                /*!< (@ 0x40004000) SPI0 Structure                                             */
  __IOM uint8_t   R8_SPI0_CTRL_MOD;             /*!< (@ 0x00000000) RW, SPI0 mode control                                      */
  __IOM uint8_t   R8_SPI0_CTRL_CFG;             /*!< (@ 0x00000001) RW, SPI0 configuration control                             */
  __IOM uint8_t   R8_SPI0_INTER_EN;             /*!< (@ 0x00000002) RW, SPI0 interrupt enable                                  */
  __IOM uint8_t   R8_SPI0_CLOCK_DIV__R8_SPI0_SLAVE_PRE;/*!< (@ 0x00000003) RW, SPI0 master clock divisor;RW, SPI0 slave
                                                                    preset value                                               */
  __IOM uint8_t   R8_SPI0_BUFFER;               /*!< (@ 0x00000004) RW, SPI0 data buffer                                       */
  __IM  uint8_t   R8_SPI0_RUN_FLAG;             /*!< (@ 0x00000005) RO, SPI0 work flag                                         */
  __IOM uint8_t   R8_SPI0_INT_FLAG;             /*!< (@ 0x00000006) RW1, SPI0 interrupt flag                                   */
  __IM  uint8_t   R8_SPI0_FIFO_COUNT;           /*!< (@ 0x00000007) RO, SPI0 FIFO count status                                 */
  __IM  uint16_t  RESERVED[2];
  __IOM uint16_t  R16_SPI0_TOTAL_CNT;           /*!< (@ 0x0000000C) RW, SPI0 total byte count, only low 12 bit                 */
  __IM  uint16_t  RESERVED1;
  __IOM uint8_t   R8_SPI0_FIFO;                 /*!< (@ 0x00000010) RO/WO, SPI0 FIFO register                                  */
  __IM  uint8_t   RESERVED2[2];
  __IM  uint8_t   R8_SPI0_FIFO_COUNT1;          /*!< (@ 0x00000013) RO, SPI0 FIFO count status                                 */
  __IOM uint16_t  R16_SPI0_DMA_NOW;             /*!< (@ 0x00000014) RW, SPI0 DMA current address                               */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  R16_SPI0_DMA_BEG;             /*!< (@ 0x00000018) RW, SPI0 DMA begin address                                 */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  R16_SPI0_DMA_END;             /*!< (@ 0x0000001C) RW, SPI0 DMA end address                                   */
} SPI0_Type;                                    /*!< Size = 30 (0x1e)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI1 register (SPI1)
  */

typedef struct {                                /*!< (@ 0x40004400) SPI1 Structure                                             */
  __IOM uint8_t   R8_SPI1_CTRL_MOD;             /*!< (@ 0x00000000) RW, SPI1 mode control                                      */
  __IOM uint8_t   R8_SPI1_CTRL_CFG;             /*!< (@ 0x00000001) RW, SPI1 configuration control                             */
  __IOM uint8_t   R8_SPI1_INTER_EN;             /*!< (@ 0x00000002) RW, SPI1 interrupt enable                                  */
  __IOM uint8_t   R8_SPI1_CLOCK_DIV;            /*!< (@ 0x00000003) RW, SPI1 master clock divisor                              */
  __IOM uint8_t   R8_SPI1_BUFFER;               /*!< (@ 0x00000004) RW, SPI1 data buffer                                       */
  __IM  uint8_t   R8_SPI1_RUN_FLAG;             /*!< (@ 0x00000005) RO, SPI1 work flag                                         */
  __IOM uint8_t   R8_SPI1_INT_FLAG;             /*!< (@ 0x00000006) RW1, SPI1 interrupt flag                                   */
  __IM  uint8_t   R8_SPI1_FIFO_COUNT;           /*!< (@ 0x00000007) RO, SPI1 FIFO count status                                 */
  __IM  uint16_t  RESERVED[2];
  __IOM uint16_t  R16_SPI1_TOTAL_CNT;           /*!< (@ 0x0000000C) RW, SPI1 total byte count, only low 12 bit                 */
  __IM  uint16_t  RESERVED1;
  __IOM uint8_t   R8_SPI1_FIFO;                 /*!< (@ 0x00000010) RO/WO, SPI1 FIFO register                                  */
  __IM  uint8_t   RESERVED2[2];
  __IM  uint8_t   R8_SPI1_FIFO_COUNT1;          /*!< (@ 0x00000013) RO, SPI1 FIFO count status                                 */
} SPI1_Type;                                    /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           PWMx                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief PWMx register (PWMx)
  */

typedef struct {                                /*!< (@ 0x40005000) PWMx Structure                                             */
  __IOM uint8_t   R8_PWM_OUT_EN;                /*!< (@ 0x00000000) RW, PWM output enable control                              */
  __IOM uint8_t   R8_PWM_POLAR;                 /*!< (@ 0x00000001) RW, PWM output polarity control                            */
  __IOM uint8_t   R8_PWM_CONFIG;                /*!< (@ 0x00000002) RW, PWM configuration                                      */
  __IOM uint8_t   R8_PWM_CLOCK_DIV;             /*!< (@ 0x00000003) RW, PWM clock divisor                                      */
  __IOM uint8_t   R8_PWM4_DATA;                 /*!< (@ 0x00000004) RW, PWM4 data holding                                      */
  __IOM uint8_t   R8_PWM5_DATA;                 /*!< (@ 0x00000005) RW, PWM5 data holding                                      */
  __IOM uint8_t   R8_PWM6_DATA;                 /*!< (@ 0x00000006) RW, PWM6 data holding                                      */
  __IOM uint8_t   R8_PWM7_DATA;                 /*!< (@ 0x00000007) RW, PWM7 data holding                                      */
  __IOM uint8_t   R8_PWM8_DATA;                 /*!< (@ 0x00000008) RW, PWM8 data holding                                      */
  __IOM uint8_t   R8_PWM9_DATA;                 /*!< (@ 0x00000009) RW, PWM9 data holding                                      */
  __IOM uint8_t   R8_PWM10_DATA;                /*!< (@ 0x0000000A) RW, PWM10 data holding                                     */
  __IOM uint8_t   R8_PWM11_DATA;                /*!< (@ 0x0000000B) RW, PWM11 data holding                                     */
} PWMx_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                            LCD                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief LCD register (LCD)
  */

typedef struct {                                /*!< (@ 0x40006000) LCD Structure                                              */
  __IOM uint8_t   R8_LCD_CTRL_MOD;              /*!< (@ 0x00000000) R8_LCD_CTRL_MOD                                            */
  __IM  uint8_t   RESERVED;
  __IM  uint16_t  RESERVED1;
  __IOM uint32_t  R32_LCD_RAM0;                 /*!< (@ 0x00000004) RW, LCD driver data0, address 0-3                          */
  __IOM uint32_t  R32_LCD_RAM1;                 /*!< (@ 0x00000008) RW, LCD driver data1, address 4-7                          */
  __IOM uint32_t  R32_LCD_RAM2;                 /*!< (@ 0x0000000C) RW, LCD driver data2, address 8-12                         */
} LCD_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                            LED                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief LED register (LED)
  */

typedef struct {                                /*!< (@ 0x40006400) LED Structure                                              */
  __IOM uint8_t   R8_LED_CTRL_MOD;              /*!< (@ 0x00000000) RW, LED mode control                                       */
  __IOM uint8_t   R8_LED_CLOCK_DIV;             /*!< (@ 0x00000001) RW, LED serial clock divisor                               */
  __IM  uint16_t  RESERVED;
  __IOM uint8_t   R8_LED_STATUS;                /*!< (@ 0x00000004) RO, LED status                                             */
  __IM  uint8_t   RESERVED1;
  __IM  uint16_t  RESERVED2;
  __OM  uint16_t  R16_LED_FIFO;                 /*!< (@ 0x00000008) WO, LED FIFO register, width is half-word                  */
  __IM  uint16_t  RESERVED3[3];
  __IOM uint16_t  R16_LED_DMA_CNT;              /*!< (@ 0x00000010) RW, LED DMA main buffer remainder half-word count,
                                                                    exclude auxiliary buffer, automatic decreasing
                                                                    after DMA, only low 12 bit                                 */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  R16_LED_DMA_MAIN;             /*!< (@ 0x00000014) RW, LED main buffer DMA begin and current address,
                                                                    automatic increasing after DMA                             */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  R16_LED_DMA_AUX;              /*!< (@ 0x00000018) RW, LED auxiliary buffer DMA begin and current
                                                                    address, automatic increasing after DMA                    */
} LED_Type;                                     /*!< Size = 26 (0x1a)                                                          */



/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief USB register (USB)
  */

typedef struct {                                /*!< (@ 0x40008000) USB Structure                                              */
  __IOM uint8_t   R8_USB_CTRL;                  /*!< (@ 0x00000000) USB base control                                           */
  __IOM uint8_t   R8_UDEV_CTRL__R8_UHOST_CTRL;  /*!< (@ 0x00000001) USB device physical prot control                           */
  __IOM uint8_t   R8_USB_INT_EN;                /*!< (@ 0x00000002) USB interrupt enable                                       */
  __IOM uint8_t   R8_USB_DEV_AD;                /*!< (@ 0x00000003) USB device address                                         */
  __IM  uint8_t   RESERVED;
  __IM  uint8_t   R8_USB_MIS_ST;                /*!< (@ 0x00000005) USB miscellaneous status                                   */
  __IOM uint8_t   R8_USB_INT_FG;                /*!< (@ 0x00000006) USB interrupt flag                                         */
  __IM  uint8_t   R8_USB_INT_ST;                /*!< (@ 0x00000007) USB interrupt status                                       */
  __IM  uint8_t   R8_USB_RX_LEN;                /*!< (@ 0x00000008) USB receiving length                                       */
  __IM  uint8_t   RESERVED1;
  __IM  uint16_t  RESERVED2;
  __IOM uint8_t   R8_UEP4_1_MOD;                /*!< (@ 0x0000000C) endpoint 4/1 mode                                          */
  __IOM uint8_t   R8_UEP2_3_MOD__R8_UH_EP_MOD;  /*!< (@ 0x0000000D) endpoint 2/3 mode;host endpoint mode                       */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  R16_UEP0_DMA;                 /*!< (@ 0x00000010) endpoint 0 DMA buffer address                              */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  R16_UEP1_DMA;                 /*!< (@ 0x00000014) endpoint 1 DMA buffer address                              */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  R16_UEP2_DMA__R16_UH_RX_DMA;  /*!< (@ 0x00000018) endpoint 2 DMA buffer address;host rx endpoint
                                                                    buffer high address                                        */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  R16_UEP3_DMA__R16_UH_TX_DMA;  /*!< (@ 0x0000001C) endpoint 3 DMA buffer address;host tx endpoint
                                                                    buffer high address                                        */
  __IM  uint16_t  RESERVED7;
  __IOM uint8_t   R8_UEP0_T_LEN;                /*!< (@ 0x00000020) endpoint 0 transmittal length                              */
  __IM  uint8_t   RESERVED8;
  __IOM uint8_t   R8_UEP0_CTRL;                 /*!< (@ 0x00000022) endpoint 0 control                                         */
  __IM  uint8_t   RESERVED9;
  __IOM uint8_t   R8_UEP1_T_LEN;                /*!< (@ 0x00000024) endpoint 1 transmittal length                              */
  __IM  uint8_t   RESERVED10;
  __IOM uint8_t   R8_UEP1_CTRL__R8_UH_SETUP;    /*!< (@ 0x00000026) endpoint 1 control;host aux setup                          */
  __IM  uint8_t   RESERVED11;
  __IOM uint8_t   R8_UEP2_T_LEN__R8_UH_EP_PID;  /*!< (@ 0x00000028) endpoint 2 transmittal length;host endpoint and
                                                                    PID                                                        */
  __IM  uint8_t   RESERVED12;
  __IOM uint8_t   R8_UEP2_CTRL__R8_UH_RX_CTRL;  /*!< (@ 0x0000002A) endpoint 2 control;host receiver endpoint control          */
  __IM  uint8_t   RESERVED13;
  __IOM uint8_t   R8_UEP3_T_LEN__R8_UH_TX_LEN;  /*!< (@ 0x0000002C) endpoint 3 transmittal length;host transmittal
                                                                    endpoint transmittal length                                */
  __IM  uint8_t   RESERVED14;
  __IOM uint8_t   R8_UEP3_CTRL__R8_UH_TX_CTRL;  /*!< (@ 0x0000002E) endpoint 3 control;host transmittal endpoint
                                                                    control                                                    */
  __IM  uint8_t   RESERVED15;
  __IOM uint8_t   R8_UEP4_T_LEN;                /*!< (@ 0x00000030) endpoint 4 transmittal length                              */
  __IM  uint8_t   RESERVED16;
  __IOM uint8_t   R8_UEP4_CTRL;                 /*!< (@ 0x00000032) endpoint 4 control                                         */
  __IM  uint8_t   RESERVED17;
  __IM  uint16_t  RESERVED18[2];
  __IOM uint8_t   R8_USB_TYPE_C_CTRL;           /*!< (@ 0x00000038) USB type-C control                                         */
  __IM  uint8_t   RESERVED19;
  __IM  uint16_t  RESERVED20;
} USB_Type;                                     /*!< Size = 60 (0x3c)                                                          */



/* =========================================================================================================================== */
/* ================                                            ETH                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief ETH register (ETH)
  */

typedef struct {                                /*!< (@ 0x40009000) ETH Structure                                              */
  __IM  uint16_t  RESERVED;
  __IM  uint8_t   RESERVED1;
  __IOM uint8_t   R8_ETH_EIE;                   /*!< (@ 0x00000003) soso                                                       */
  __IOM uint8_t   R8_ETH_EIR;                   /*!< (@ 0x00000004) soso                                                       */
  __IM  uint8_t   R8_ETH_ESTAT;                 /*!< (@ 0x00000005) soso                                                       */
  __IOM uint8_t   R8_ETH_ECON2;                 /*!< (@ 0x00000006) soso                                                       */
  __IOM uint8_t   R8_ETH_ECON1;                 /*!< (@ 0x00000007) soso                                                       */
  __IOM uint16_t  R16_ETH_ETXST;                /*!< (@ 0x00000008) soso                                                       */
  __IOM uint16_t  R16_ETH_ETXLN;                /*!< (@ 0x0000000A) soso                                                       */
  __IOM uint16_t  R16_ETH_ERXST;                /*!< (@ 0x0000000C) soso                                                       */
  __IOM uint16_t  R16_ETH_ERXLN;                /*!< (@ 0x0000000E) soso                                                       */
  __IOM uint8_t   R8_ETH_EHT0;                  /*!< (@ 0x00000010) soso                                                       */
  __IOM uint8_t   R8_ETH_EHT1;                  /*!< (@ 0x00000011) soso                                                       */
  __IOM uint8_t   R8_ETH_EHT2;                  /*!< (@ 0x00000012) soso                                                       */
  __IOM uint8_t   R8_ETH_EHT3;                  /*!< (@ 0x00000013) soso                                                       */
  __IOM uint8_t   R8_ETH_EHT4;                  /*!< (@ 0x00000014) soso                                                       */
  __IOM uint8_t   R8_ETH_EHT5;                  /*!< (@ 0x00000015) soso                                                       */
  __IOM uint8_t   R8_ETH_EHT6;                  /*!< (@ 0x00000016) soso                                                       */
  __IOM uint8_t   R8_ETH_EHT7;                  /*!< (@ 0x00000017) soso                                                       */
  __IOM uint8_t   R8_ETH_ERXFCON;               /*!< (@ 0x00000018) soso                                                       */
  __IOM uint8_t   R8_ETH_MACON1;                /*!< (@ 0x00000019) soso                                                       */
  __IOM uint8_t   R8_ETH_MACON2;                /*!< (@ 0x0000001A) soso                                                       */
  __IOM uint8_t   R8_ETH_MABBIPG;               /*!< (@ 0x0000001B) soso                                                       */
  __IOM uint16_t  R16_ETH_EPAUS;                /*!< (@ 0x0000001C) soso                                                       */
  __IOM uint16_t  R16_ETH_MAMXFL;               /*!< (@ 0x0000001E) soso                                                       */
  __IOM uint16_t  R16_ETH_MIRD;                 /*!< (@ 0x00000020) soso                                                       */
  __IM  uint16_t  RESERVED2;
  __IOM uint8_t   R8_ETH_MIREGADR;              /*!< (@ 0x00000024) soso                                                       */
  __IM  uint8_t   R8_ETH_MISTAT;                /*!< (@ 0x00000025) soso                                                       */
  __OM  uint16_t  R16_ETH_MIWR;                 /*!< (@ 0x00000026) soso                                                       */
  __IOM uint32_t  R32_ETH_MAADRL;               /*!< (@ 0x00000028) soso                                                       */
  __IOM uint16_t  R16_ETH_MAADRH;               /*!< (@ 0x0000002C) soso                                                       */
  __IM  uint16_t  RESERVED3;
} ETH_Type;                                     /*!< Size = 48 (0x30)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define SYS_BASE                    0x40001000UL
#define FLASH_BASE                  0x40001800UL
#define TMR0_BASE                   0x40002000UL
#define TMR1_BASE                   0x40002400UL
#define TMR2_BASE                   0x40002800UL
#define TMR3_BASE                   0x40002C00UL
#define UART0_BASE                  0x40003000UL
#define UART1_BASE                  0x40003400UL
#define UART2_BASE                  0x40003800UL
#define UART3_BASE                  0x40003C00UL
#define SPI0_BASE                   0x40004000UL
#define SPI1_BASE                   0x40004400UL
#define PWMx_BASE                   0x40005000UL
#define LCD_BASE                    0x40006000UL
#define LED_BASE                    0x40006400UL
#define USB_BASE                    0x40008000UL
#define ETH_BASE                    0x40009000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define SYS                         ((SYS_Type*)               SYS_BASE)
#define FLASH                       ((FLASH_Type*)             FLASH_BASE)
#define TMR0                        ((TMR_Type*)               TMR0_BASE)
#define TMR1                        ((TMR_Type*)               TMR1_BASE)
#define TMR2                        ((TMR_Type*)               TMR2_BASE)
#define TMR3                        ((TMR_Type*)               TMR3_BASE)
#define UART0                       ((UART_Type*)              UART0_BASE)
#define UART1                       ((UART_Type*)              UART1_BASE)
#define UART2                       ((UART_Type*)              UART2_BASE)
#define UART3                       ((UART_Type*)              UART3_BASE)
#define SPI0                        ((SPI0_Type*)              SPI0_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define PWMx                        ((PWMx_Type*)              PWMx_BASE)
#define LCD                         ((LCD_Type*)               LCD_BASE)
#define LED                         ((LED_Type*)               LED_BASE)
#define USB                         ((USB_Type*)               USB_BASE)
#define ETH                         ((ETH_Type*)               ETH_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            SYS                                            ================ */
/* =========================================================================================================================== */

/* ====================================================  R16_CLK_SYS_CFG  ==================================================== */
#define SYS_R16_CLK_SYS_CFG_RB_CLK_PLL_DIV_Pos (0UL)                /*!< RB_CLK_PLL_DIV (Bit 0)                                */
#define SYS_R16_CLK_SYS_CFG_RB_CLK_PLL_DIV_Msk (0x1fUL)             /*!< RB_CLK_PLL_DIV (Bitfield-Mask: 0x1f)                  */
#define SYS_R16_CLK_SYS_CFG_RB_CLK_SYS_MOD_Pos (6UL)                /*!< RB_CLK_SYS_MOD (Bit 6)                                */
#define SYS_R16_CLK_SYS_CFG_RB_CLK_SYS_MOD_Msk (0xc0UL)             /*!< RB_CLK_SYS_MOD (Bitfield-Mask: 0x03)                  */
#define SYS_R16_CLK_SYS_CFG_RB_CLK_OSC32M_XT_Pos (9UL)              /*!< RB_CLK_OSC32M_XT (Bit 9)                              */
#define SYS_R16_CLK_SYS_CFG_RB_CLK_OSC32M_XT_Msk (0x200UL)          /*!< RB_CLK_OSC32M_XT (Bitfield-Mask: 0x01)                */
#define SYS_R16_CLK_SYS_CFG_RB_XO_DI_Pos  (15UL)                    /*!< RB_XO_DI (Bit 15)                                     */
#define SYS_R16_CLK_SYS_CFG_RB_XO_DI_Msk  (0x8000UL)                /*!< RB_XO_DI (Bitfield-Mask: 0x01)                        */
/* ===================================================  R8_HFCK_PWR_CTRL  ==================================================== */
#define SYS_R8_HFCK_PWR_CTRL_RB_CLK_XT32M_PON_Pos (2UL)             /*!< RB_CLK_XT32M_PON (Bit 2)                              */
#define SYS_R8_HFCK_PWR_CTRL_RB_CLK_XT32M_PON_Msk (0x4UL)           /*!< RB_CLK_XT32M_PON (Bitfield-Mask: 0x01)                */
#define SYS_R8_HFCK_PWR_CTRL_RB_CLK_INT32M_PON_Pos (3UL)            /*!< RB_CLK_INT32M_PON (Bit 3)                             */
#define SYS_R8_HFCK_PWR_CTRL_RB_CLK_INT32M_PON_Msk (0x8UL)          /*!< RB_CLK_INT32M_PON (Bitfield-Mask: 0x01)               */
#define SYS_R8_HFCK_PWR_CTRL_RB_CLK_PLL_PON_Pos (4UL)               /*!< RB_CLK_PLL_PON (Bit 4)                                */
#define SYS_R8_HFCK_PWR_CTRL_RB_CLK_PLL_PON_Msk (0x10UL)            /*!< RB_CLK_PLL_PON (Bitfield-Mask: 0x01)                  */
/* ====================================================  R8_SLP_CLK_OFF0  ==================================================== */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_TMR0_Pos (0UL)               /*!< RB_SLP_CLK_TMR0 (Bit 0)                               */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_TMR0_Msk (0x1UL)             /*!< RB_SLP_CLK_TMR0 (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_TMR1_Pos (1UL)               /*!< RB_SLP_CLK_TMR1 (Bit 1)                               */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_TMR1_Msk (0x2UL)             /*!< RB_SLP_CLK_TMR1 (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_TMR2_Pos (2UL)               /*!< RB_SLP_CLK_TMR2 (Bit 2)                               */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_TMR2_Msk (0x4UL)             /*!< RB_SLP_CLK_TMR2 (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_TMR3_Pos (3UL)               /*!< RB_SLP_CLK_TMR3 (Bit 3)                               */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_TMR3_Msk (0x8UL)             /*!< RB_SLP_CLK_TMR3 (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_UART0_Pos (4UL)              /*!< RB_SLP_CLK_UART0 (Bit 4)                              */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_UART0_Msk (0x10UL)           /*!< RB_SLP_CLK_UART0 (Bitfield-Mask: 0x01)                */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_UART1_Pos (5UL)              /*!< RB_SLP_CLK_UART1 (Bit 5)                              */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_UART1_Msk (0x20UL)           /*!< RB_SLP_CLK_UART1 (Bitfield-Mask: 0x01)                */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_UART2_Pos (6UL)              /*!< RB_SLP_CLK_UART2 (Bit 6)                              */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_UART2_Msk (0x40UL)           /*!< RB_SLP_CLK_UART2 (Bitfield-Mask: 0x01)                */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_UART3_Pos (7UL)              /*!< RB_SLP_CLK_UART3 (Bit 7)                              */
#define SYS_R8_SLP_CLK_OFF0_RB_SLP_CLK_UART3_Msk (0x80UL)           /*!< RB_SLP_CLK_UART3 (Bitfield-Mask: 0x01)                */
/* ====================================================  R8_SLP_CLK_OFF1  ==================================================== */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_SPI0_Pos (0UL)               /*!< RB_SLP_CLK_SPI0 (Bit 0)                               */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_SPI0_Msk (0x1UL)             /*!< RB_SLP_CLK_SPI0 (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_SPI1_Pos (1UL)               /*!< RB_SLP_CLK_SPI1 (Bit 1)                               */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_SPI1_Msk (0x2UL)             /*!< RB_SLP_CLK_SPI1 (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_PWMX_Pos (2UL)               /*!< RB_SLP_CLK_PWMX (Bit 2)                               */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_PWMX_Msk (0x4UL)             /*!< RB_SLP_CLK_PWMX (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_LCD_Pos (3UL)                /*!< RB_SLP_CLK_LCD (Bit 3)                                */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_LCD_Msk (0x8UL)              /*!< RB_SLP_CLK_LCD (Bitfield-Mask: 0x01)                  */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_USB_Pos (4UL)                /*!< RB_SLP_CLK_USB (Bit 4)                                */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_USB_Msk (0x10UL)             /*!< RB_SLP_CLK_USB (Bitfield-Mask: 0x01)                  */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_ETH_Pos (5UL)                /*!< RB_SLP_CLK_ETH (Bit 5)                                */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_ETH_Msk (0x20UL)             /*!< RB_SLP_CLK_ETH (Bitfield-Mask: 0x01)                  */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_LED_Pos (6UL)                /*!< RB_SLP_CLK_LED (Bit 6)                                */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_LED_Msk (0x40UL)             /*!< RB_SLP_CLK_LED (Bitfield-Mask: 0x01)                  */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_BLE_Pos (7UL)                /*!< RB_SLP_CLK_BLE (Bit 7)                                */
#define SYS_R8_SLP_CLK_OFF1_RB_SLP_CLK_BLE_Msk (0x80UL)             /*!< RB_SLP_CLK_BLE (Bitfield-Mask: 0x01)                  */
/* ===================================================  R8_SLP_WAKE_CTRL  ==================================================== */
#define SYS_R8_SLP_WAKE_CTRL_RB_SLP_USB_WAKE_Pos (0UL)              /*!< RB_SLP_USB_WAKE (Bit 0)                               */
#define SYS_R8_SLP_WAKE_CTRL_RB_SLP_USB_WAKE_Msk (0x1UL)            /*!< RB_SLP_USB_WAKE (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_WAKE_CTRL_RB_SLP_ETH_WAKE_Pos (1UL)              /*!< RB_SLP_ETH_WAKE (Bit 1)                               */
#define SYS_R8_SLP_WAKE_CTRL_RB_SLP_ETH_WAKE_Msk (0x2UL)            /*!< RB_SLP_ETH_WAKE (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_WAKE_CTRL_RB_SLP_RTC_WAKE_Pos (3UL)              /*!< RB_SLP_RTC_WAKE (Bit 3)                               */
#define SYS_R8_SLP_WAKE_CTRL_RB_SLP_RTC_WAKE_Msk (0x8UL)            /*!< RB_SLP_RTC_WAKE (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_WAKE_CTRL_RB_SLP_GPIO_WAKE_Pos (4UL)             /*!< RB_SLP_GPIO_WAKE (Bit 4)                              */
#define SYS_R8_SLP_WAKE_CTRL_RB_SLP_GPIO_WAKE_Msk (0x10UL)          /*!< RB_SLP_GPIO_WAKE (Bitfield-Mask: 0x01)                */
#define SYS_R8_SLP_WAKE_CTRL_RB_SLP_BAT_WAKE_Pos (5UL)              /*!< RB_SLP_BAT_WAKE (Bit 5)                               */
#define SYS_R8_SLP_WAKE_CTRL_RB_SLP_BAT_WAKE_Msk (0x20UL)           /*!< RB_SLP_BAT_WAKE (Bitfield-Mask: 0x01)                 */
/* ===================================================  R8_SLP_POWER_CTRL  =================================================== */
#define SYS_R8_SLP_POWER_CTRL_RB_SLP_ETH_PWR_DN_Pos (1UL)           /*!< RB_SLP_ETH_PWR_DN (Bit 1)                             */
#define SYS_R8_SLP_POWER_CTRL_RB_SLP_ETH_PWR_DN_Msk (0x2UL)         /*!< RB_SLP_ETH_PWR_DN (Bitfield-Mask: 0x01)               */
#define SYS_R8_SLP_POWER_CTRL_RB_SLP_ROM_PWR_DN_Pos (3UL)           /*!< RB_SLP_ROM_PWR_DN (Bit 3)                             */
#define SYS_R8_SLP_POWER_CTRL_RB_SLP_ROM_PWR_DN_Msk (0x8UL)         /*!< RB_SLP_ROM_PWR_DN (Bitfield-Mask: 0x01)               */
#define SYS_R8_SLP_POWER_CTRL_RB_SLP_CLK_RAMX_Pos (4UL)             /*!< RB_SLP_CLK_RAMX (Bit 4)                               */
#define SYS_R8_SLP_POWER_CTRL_RB_SLP_CLK_RAMX_Msk (0x10UL)          /*!< RB_SLP_CLK_RAMX (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SLP_POWER_CTRL_RB_SLP_CLK_RAM2K_Pos (5UL)            /*!< RB_SLP_CLK_RAM2K (Bit 5)                              */
#define SYS_R8_SLP_POWER_CTRL_RB_SLP_CLK_RAM2K_Msk (0x20UL)         /*!< RB_SLP_CLK_RAM2K (Bitfield-Mask: 0x01)                */
/* ===================================================  R16_PIN_ALTERNATE  =================================================== */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_TMR0_Pos (0UL)                 /*!< RB_PIN_TMR0 (Bit 0)                                   */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_TMR0_Msk (0x1UL)               /*!< RB_PIN_TMR0 (Bitfield-Mask: 0x01)                     */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_TMR1_Pos (1UL)                 /*!< RB_PIN_TMR1 (Bit 1)                                   */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_TMR1_Msk (0x2UL)               /*!< RB_PIN_TMR1 (Bitfield-Mask: 0x01)                     */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_TMR2_Pos (2UL)                 /*!< RB_PIN_TMR2 (Bit 2)                                   */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_TMR2_Msk (0x4UL)               /*!< RB_PIN_TMR2 (Bitfield-Mask: 0x01)                     */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_TMR3_Pos (3UL)                 /*!< RB_PIN_TMR3 (Bit 3)                                   */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_TMR3_Msk (0x8UL)               /*!< RB_PIN_TMR3 (Bitfield-Mask: 0x01)                     */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_UART0_Pos (4UL)                /*!< RB_PIN_UART0 (Bit 4)                                  */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_UART0_Msk (0x10UL)             /*!< RB_PIN_UART0 (Bitfield-Mask: 0x01)                    */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_UART1_Pos (5UL)                /*!< RB_PIN_UART1 (Bit 5)                                  */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_UART1_Msk (0x20UL)             /*!< RB_PIN_UART1 (Bitfield-Mask: 0x01)                    */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_UART2_Pos (6UL)                /*!< RB_PIN_UART2 (Bit 6)                                  */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_UART2_Msk (0x40UL)             /*!< RB_PIN_UART2 (Bitfield-Mask: 0x01)                    */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_UART3_Pos (7UL)                /*!< RB_PIN_UART3 (Bit 7)                                  */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_UART3_Msk (0x80UL)             /*!< RB_PIN_UART3 (Bitfield-Mask: 0x01)                    */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_SPI0_Pos (8UL)                 /*!< RB_PIN_SPI0 (Bit 8)                                   */
#define SYS_R16_PIN_ALTERNATE_RB_PIN_SPI0_Msk (0x100UL)             /*!< RB_PIN_SPI0 (Bitfield-Mask: 0x01)                     */
/* ===================================================  R16_PIN_ANALOG_IE  =================================================== */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG0_3_IE_Pos (0UL)            /*!< RB_PIN_SEG0_3_IE (Bit 0)                              */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG0_3_IE_Msk (0x1UL)          /*!< RB_PIN_SEG0_3_IE (Bitfield-Mask: 0x01)                */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG4_7_IE_Pos (1UL)            /*!< RB_PIN_SEG4_7_IE (Bit 1)                              */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG4_7_IE_Msk (0x2UL)          /*!< RB_PIN_SEG4_7_IE (Bitfield-Mask: 0x01)                */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG8_11_IE_Pos (2UL)           /*!< RB_PIN_SEG8_11_IE (Bit 2)                             */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG8_11_IE_Msk (0x4UL)         /*!< RB_PIN_SEG8_11_IE (Bitfield-Mask: 0x01)               */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG12_15_IE_Pos (3UL)          /*!< RB_PIN_SEG12_15_IE (Bit 3)                            */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG12_15_IE_Msk (0x8UL)        /*!< RB_PIN_SEG12_15_IE (Bitfield-Mask: 0x01)              */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG16_19_IE_Pos (4UL)          /*!< RB_PIN_SEG16_19_IE (Bit 4)                            */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG16_19_IE_Msk (0x10UL)       /*!< RB_PIN_SEG16_19_IE (Bitfield-Mask: 0x01)              */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG20_23_IE_Pos (5UL)          /*!< RB_PIN_SEG20_23_IE (Bit 5)                            */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_SEG20_23_IE_Msk (0x20UL)       /*!< RB_PIN_SEG20_23_IE (Bitfield-Mask: 0x01)              */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ETH_IE_Pos (6UL)               /*!< RB_PIN_ETH_IE (Bit 6)                                 */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ETH_IE_Msk (0x40UL)            /*!< RB_PIN_ETH_IE (Bitfield-Mask: 0x01)                   */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_USB_IE_Pos (7UL)               /*!< RB_PIN_USB_IE (Bit 7)                                 */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_USB_IE_Msk (0x80UL)            /*!< RB_PIN_USB_IE (Bitfield-Mask: 0x01)                   */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC8_9_IE_Pos (8UL)            /*!< RB_PIN_ADC8_9_IE (Bit 8)                              */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC8_9_IE_Msk (0x100UL)        /*!< RB_PIN_ADC8_9_IE (Bitfield-Mask: 0x01)                */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC6_7_IE_Pos (9UL)            /*!< RB_PIN_ADC6_7_IE (Bit 9)                              */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC6_7_IE_Msk (0x200UL)        /*!< RB_PIN_ADC6_7_IE (Bitfield-Mask: 0x01)                */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC0_1_IE_Pos (10UL)           /*!< RB_PIN_ADC0_1_IE (Bit 10)                             */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC0_1_IE_Msk (0x400UL)        /*!< RB_PIN_ADC0_1_IE (Bitfield-Mask: 0x01)                */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC10_11_IE_Pos (11UL)         /*!< RB_PIN_ADC10_11_IE (Bit 11)                           */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC10_11_IE_Msk (0x800UL)      /*!< RB_PIN_ADC10_11_IE (Bitfield-Mask: 0x01)              */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC12_13_IE_Pos (12UL)         /*!< RB_PIN_ADC12_13_IE (Bit 12)                           */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC12_13_IE_Msk (0x1000UL)     /*!< RB_PIN_ADC12_13_IE (Bitfield-Mask: 0x01)              */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_XT32K_IE_Pos (13UL)            /*!< RB_PIN_XT32K_IE (Bit 13)                              */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_XT32K_IE_Msk (0x2000UL)        /*!< RB_PIN_XT32K_IE (Bitfield-Mask: 0x01)                 */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC2_3_IE_Pos (14UL)           /*!< RB_PIN_ADC2_3_IE (Bit 14)                             */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC2_3_IE_Msk (0x4000UL)       /*!< RB_PIN_ADC2_3_IE (Bitfield-Mask: 0x01)                */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC4_5_IE_Pos (15UL)           /*!< RB_PIN_ADC4_5_IE (Bit 15)                             */
#define SYS_R16_PIN_ANALOG_IE_RB_PIN_ADC4_5_IE_Msk (0x8000UL)       /*!< RB_PIN_ADC4_5_IE (Bitfield-Mask: 0x01)                */
/* =====================================================  R8_SLV_CONFIG  ===================================================== */
#define SYS_R8_SLV_CONFIG_RB_SLV_ENABLE_Pos (0UL)                   /*!< RB_SLV_ENABLE (Bit 0)                                 */
#define SYS_R8_SLV_CONFIG_RB_SLV_ENABLE_Msk (0x1UL)                 /*!< RB_SLV_ENABLE (Bitfield-Mask: 0x01)                   */
#define SYS_R8_SLV_CONFIG_RB_SLV_IE_CMD_Pos (1UL)                   /*!< RB_SLV_IE_CMD (Bit 1)                                 */
#define SYS_R8_SLV_CONFIG_RB_SLV_IE_CMD_Msk (0x2UL)                 /*!< RB_SLV_IE_CMD (Bitfield-Mask: 0x01)                   */
#define SYS_R8_SLV_CONFIG_RB_SLV_IE_WR_Pos (2UL)                    /*!< RB_SLV_IE_WR (Bit 2)                                  */
#define SYS_R8_SLV_CONFIG_RB_SLV_IE_WR_Msk (0x4UL)                  /*!< RB_SLV_IE_WR (Bitfield-Mask: 0x01)                    */
#define SYS_R8_SLV_CONFIG_RB_SLV_IE_RD_Pos (3UL)                    /*!< RB_SLV_IE_RD (Bit 3)                                  */
#define SYS_R8_SLV_CONFIG_RB_SLV_IE_RD_Msk (0x8UL)                  /*!< RB_SLV_IE_RD (Bitfield-Mask: 0x01)                    */
#define SYS_R8_SLV_CONFIG_RB_IF_SLV_CMD_Pos (5UL)                   /*!< RB_IF_SLV_CMD (Bit 5)                                 */
#define SYS_R8_SLV_CONFIG_RB_IF_SLV_CMD_Msk (0x20UL)                /*!< RB_IF_SLV_CMD (Bitfield-Mask: 0x01)                   */
#define SYS_R8_SLV_CONFIG_RB_IF_SLV_WR_Pos (6UL)                    /*!< RB_IF_SLV_WR (Bit 6)                                  */
#define SYS_R8_SLV_CONFIG_RB_IF_SLV_WR_Msk (0x40UL)                 /*!< RB_IF_SLV_WR (Bitfield-Mask: 0x01)                    */
#define SYS_R8_SLV_CONFIG_RB_IF_SLV_RD_Pos (7UL)                    /*!< RB_IF_SLV_RD (Bit 7)                                  */
#define SYS_R8_SLV_CONFIG_RB_IF_SLV_RD_Msk (0x80UL)                 /*!< RB_IF_SLV_RD (Bitfield-Mask: 0x01)                    */
/* ====================================================  R16_POWER_PLAN  ===================================================== */
#define SYS_R16_POWER_PLAN_RB_PWR_RAM2K_Pos (1UL)                   /*!< RB_PWR_RAM2K (Bit 1)                                  */
#define SYS_R16_POWER_PLAN_RB_PWR_RAM2K_Msk (0x2UL)                 /*!< RB_PWR_RAM2K (Bitfield-Mask: 0x01)                    */
#define SYS_R16_POWER_PLAN_RB_PWR_CORE_Pos (2UL)                    /*!< RB_PWR_CORE (Bit 2)                                   */
#define SYS_R16_POWER_PLAN_RB_PWR_CORE_Msk (0x4UL)                  /*!< RB_PWR_CORE (Bitfield-Mask: 0x01)                     */
#define SYS_R16_POWER_PLAN_RB_PWR_EXTEND_Pos (3UL)                  /*!< RB_PWR_EXTEND (Bit 3)                                 */
#define SYS_R16_POWER_PLAN_RB_PWR_EXTEND_Msk (0x8UL)                /*!< RB_PWR_EXTEND (Bitfield-Mask: 0x01)                   */
#define SYS_R16_POWER_PLAN_RB_PWR_RAM14K_Pos (4UL)                  /*!< RB_PWR_RAM14K (Bit 4)                                 */
#define SYS_R16_POWER_PLAN_RB_PWR_RAM14K_Msk (0x10UL)               /*!< RB_PWR_RAM14K (Bitfield-Mask: 0x01)                   */
#define SYS_R16_POWER_PLAN_RB_PWR_SYS_EN_Pos (7UL)                  /*!< RB_PWR_SYS_EN (Bit 7)                                 */
#define SYS_R16_POWER_PLAN_RB_PWR_SYS_EN_Msk (0x80UL)               /*!< RB_PWR_SYS_EN (Bitfield-Mask: 0x01)                   */
#define SYS_R16_POWER_PLAN_RB_PWR_MUST_1_Pos (8UL)                  /*!< RB_PWR_MUST_1 (Bit 8)                                 */
#define SYS_R16_POWER_PLAN_RB_PWR_MUST_1_Msk (0x100UL)              /*!< RB_PWR_MUST_1 (Bitfield-Mask: 0x01)                   */
#define SYS_R16_POWER_PLAN_RB_PWR_DCDC_EN_Pos (9UL)                 /*!< RB_PWR_DCDC_EN (Bit 9)                                */
#define SYS_R16_POWER_PLAN_RB_PWR_DCDC_EN_Msk (0x200UL)             /*!< RB_PWR_DCDC_EN (Bitfield-Mask: 0x01)                  */
#define SYS_R16_POWER_PLAN_RB_PWR_DCDC_PRE_Pos (10UL)               /*!< RB_PWR_DCDC_PRE (Bit 10)                              */
#define SYS_R16_POWER_PLAN_RB_PWR_DCDC_PRE_Msk (0x400UL)            /*!< RB_PWR_DCDC_PRE (Bitfield-Mask: 0x01)                 */
#define SYS_R16_POWER_PLAN_RB_PWR_MUST_0010_Pos (11UL)              /*!< RB_PWR_MUST_0010 (Bit 11)                             */
#define SYS_R16_POWER_PLAN_RB_PWR_MUST_0010_Msk (0x7800UL)          /*!< RB_PWR_MUST_0010 (Bitfield-Mask: 0x0f)                */
#define SYS_R16_POWER_PLAN_RB_PWR_PLAN_EN_Pos (15UL)                /*!< RB_PWR_PLAN_EN (Bit 15)                               */
#define SYS_R16_POWER_PLAN_RB_PWR_PLAN_EN_Msk (0x8000UL)            /*!< RB_PWR_PLAN_EN (Bitfield-Mask: 0x01)                  */
/* ===================================================  R8_AUX_POWER_ADJ  ==================================================== */
#define SYS_R8_AUX_POWER_ADJ_RB_ULPLDO_ADJ_Pos (0UL)                /*!< RB_ULPLDO_ADJ (Bit 0)                                 */
#define SYS_R8_AUX_POWER_ADJ_RB_ULPLDO_ADJ_Msk (0x7UL)              /*!< RB_ULPLDO_ADJ (Bitfield-Mask: 0x07)                   */
#define SYS_R8_AUX_POWER_ADJ_Reserved_1xx_Pos (3UL)                 /*!< Reserved_1xx (Bit 3)                                  */
#define SYS_R8_AUX_POWER_ADJ_Reserved_1xx_Msk (0x38UL)              /*!< Reserved_1xx (Bitfield-Mask: 0x07)                    */
/* ====================================================  R8_BAT_DET_CTRL  ==================================================== */
#define SYS_R8_BAT_DET_CTRL_RB_BAT_DET_EN_Pos (0UL)                 /*!< RB_BAT_DET_EN (Bit 0)                                 */
#define SYS_R8_BAT_DET_CTRL_RB_BAT_DET_EN_Msk (0x1UL)               /*!< RB_BAT_DET_EN (Bitfield-Mask: 0x01)                   */
#define SYS_R8_BAT_DET_CTRL_RB_BAT_LOWER_IE_Pos (2UL)               /*!< RB_BAT_LOWER_IE (Bit 2)                               */
#define SYS_R8_BAT_DET_CTRL_RB_BAT_LOWER_IE_Msk (0x4UL)             /*!< RB_BAT_LOWER_IE (Bitfield-Mask: 0x01)                 */
#define SYS_R8_BAT_DET_CTRL_RB_BAT_LOW_IE_Pos (3UL)                 /*!< RB_BAT_LOW_IE (Bit 3)                                 */
#define SYS_R8_BAT_DET_CTRL_RB_BAT_LOW_IE_Msk (0x8UL)               /*!< RB_BAT_LOW_IE (Bitfield-Mask: 0x01)                   */
/* ====================================================  R8_BAT_DET_CFG  ===================================================== */
#define SYS_R8_BAT_DET_CFG_RB_BAT_LOW_VTH_Pos (0UL)                 /*!< RB_BAT_LOW_VTH (Bit 0)                                */
#define SYS_R8_BAT_DET_CFG_RB_BAT_LOW_VTH_Msk (0x3UL)               /*!< RB_BAT_LOW_VTH (Bitfield-Mask: 0x03)                  */
/* =====================================================  R8_BAT_STATUS  ===================================================== */
#define SYS_R8_BAT_STATUS_RB_BAT_STAT_LOWER_Pos (0UL)               /*!< RB_BAT_STAT_LOWER (Bit 0)                             */
#define SYS_R8_BAT_STATUS_RB_BAT_STAT_LOWER_Msk (0x1UL)             /*!< RB_BAT_STAT_LOWER (Bitfield-Mask: 0x01)               */
#define SYS_R8_BAT_STATUS_RB_BAT_STAT_LOW_Pos (1UL)                 /*!< RB_BAT_STAT_LOW (Bit 1)                               */
#define SYS_R8_BAT_STATUS_RB_BAT_STAT_LOW_Msk (0x2UL)               /*!< RB_BAT_STAT_LOW (Bitfield-Mask: 0x01)                 */
/* ====================================================  R16_INT32K_TUNE  ==================================================== */
#define SYS_R16_INT32K_TUNE_RB_INT32K_TUNE_Pos (0UL)                /*!< RB_INT32K_TUNE (Bit 0)                                */
#define SYS_R16_INT32K_TUNE_RB_INT32K_TUNE_Msk (0x3ffUL)            /*!< RB_INT32K_TUNE (Bitfield-Mask: 0x3ff)                 */
/* =====================================================  R8_XT32K_TUNE  ===================================================== */
#define SYS_R8_XT32K_TUNE_RB_XT32K_I_TUNE_Pos (0UL)                 /*!< RB_XT32K_I_TUNE (Bit 0)                               */
#define SYS_R8_XT32K_TUNE_RB_XT32K_I_TUNE_Msk (0x3UL)               /*!< RB_XT32K_I_TUNE (Bitfield-Mask: 0x03)                 */
#define SYS_R8_XT32K_TUNE_RB_XT32K_C_LOAD_Pos (4UL)                 /*!< RB_XT32K_C_LOAD (Bit 4)                               */
#define SYS_R8_XT32K_TUNE_RB_XT32K_C_LOAD_Msk (0xf0UL)              /*!< RB_XT32K_C_LOAD (Bitfield-Mask: 0x0f)                 */
/* ====================================================  R8_CK32K_CONFIG  ==================================================== */
#define SYS_R8_CK32K_CONFIG_RB_CLK_XT32K_PON_Pos (0UL)              /*!< RB_CLK_XT32K_PON (Bit 0)                              */
#define SYS_R8_CK32K_CONFIG_RB_CLK_XT32K_PON_Msk (0x1UL)            /*!< RB_CLK_XT32K_PON (Bitfield-Mask: 0x01)                */
#define SYS_R8_CK32K_CONFIG_RB_CLK_INT32K_PON_Pos (1UL)             /*!< RB_CLK_INT32K_PON (Bit 1)                             */
#define SYS_R8_CK32K_CONFIG_RB_CLK_INT32K_PON_Msk (0x2UL)           /*!< RB_CLK_INT32K_PON (Bitfield-Mask: 0x01)               */
#define SYS_R8_CK32K_CONFIG_RB_CLK_OSC32K_XT_Pos (2UL)              /*!< RB_CLK_OSC32K_XT (Bit 2)                              */
#define SYS_R8_CK32K_CONFIG_RB_CLK_OSC32K_XT_Msk (0x4UL)            /*!< RB_CLK_OSC32K_XT (Bitfield-Mask: 0x01)                */
#define SYS_R8_CK32K_CONFIG_RB_32K_CLK_PIN_Pos (7UL)                /*!< RB_32K_CLK_PIN (Bit 7)                                */
#define SYS_R8_CK32K_CONFIG_RB_32K_CLK_PIN_Msk (0x80UL)             /*!< RB_32K_CLK_PIN (Bitfield-Mask: 0x01)                  */
/* ===================================================  R8_RTC_FLAG_CTRL  ==================================================== */
#define SYS_R8_RTC_FLAG_CTRL_RB_RTC_TMR_CLR_Pos (4UL)               /*!< RB_RTC_TMR_CLR (Bit 4)                                */
#define SYS_R8_RTC_FLAG_CTRL_RB_RTC_TMR_CLR_Msk (0x10UL)            /*!< RB_RTC_TMR_CLR (Bitfield-Mask: 0x01)                  */
#define SYS_R8_RTC_FLAG_CTRL_RB_RTC_TRIG_CLR_Pos (5UL)              /*!< RB_RTC_TRIG_CLR (Bit 5)                               */
#define SYS_R8_RTC_FLAG_CTRL_RB_RTC_TRIG_CLR_Msk (0x20UL)           /*!< RB_RTC_TRIG_CLR (Bitfield-Mask: 0x01)                 */
#define SYS_R8_RTC_FLAG_CTRL_RB_RTC_TMR_FLAG_Pos (6UL)              /*!< RB_RTC_TMR_FLAG (Bit 6)                               */
#define SYS_R8_RTC_FLAG_CTRL_RB_RTC_TMR_FLAG_Msk (0x40UL)           /*!< RB_RTC_TMR_FLAG (Bitfield-Mask: 0x01)                 */
#define SYS_R8_RTC_FLAG_CTRL_RB_RTC_TRIG_FLAG_Pos (7UL)             /*!< RB_RTC_TRIG_FLAG (Bit 7)                              */
#define SYS_R8_RTC_FLAG_CTRL_RB_RTC_TRIG_FLAG_Msk (0x80UL)          /*!< RB_RTC_TRIG_FLAG (Bitfield-Mask: 0x01)                */
/* ===================================================  R8_RTC_MODE_CTRL  ==================================================== */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_TMR_MODE_Pos (0UL)              /*!< RB_RTC_TMR_MODE (Bit 0)                               */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_TMR_MODE_Msk (0x7UL)            /*!< RB_RTC_TMR_MODE (Bitfield-Mask: 0x07)                 */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_IGNORE_B0_Pos (3UL)             /*!< RB_RTC_IGNORE_B0 (Bit 3)                              */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_IGNORE_B0_Msk (0x8UL)           /*!< RB_RTC_IGNORE_B0 (Bitfield-Mask: 0x01)                */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_TMR_EN_Pos (4UL)                /*!< RB_RTC_TMR_EN (Bit 4)                                 */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_TMR_EN_Msk (0x10UL)             /*!< RB_RTC_TMR_EN (Bitfield-Mask: 0x01)                   */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_TRIG_EN_Pos (5UL)               /*!< RB_RTC_TRIG_EN (Bit 5)                                */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_TRIG_EN_Msk (0x20UL)            /*!< RB_RTC_TRIG_EN (Bitfield-Mask: 0x01)                  */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_LOAD_LO_Pos (6UL)               /*!< RB_RTC_LOAD_LO (Bit 6)                                */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_LOAD_LO_Msk (0x40UL)            /*!< RB_RTC_LOAD_LO (Bitfield-Mask: 0x01)                  */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_LOAD_HI_Pos (7UL)               /*!< RB_RTC_LOAD_HI (Bit 7)                                */
#define SYS_R8_RTC_MODE_CTRL_RB_RTC_LOAD_HI_Msk (0x80UL)            /*!< RB_RTC_LOAD_HI (Bitfield-Mask: 0x01)                  */
/* =====================================================  R32_RTC_TRIG  ====================================================== */
/* ====================================================  R16_RTC_CNT_32K  ==================================================== */
/* ====================================================  R16_RTC_CNT_2S  ===================================================== */
/* ====================================================  R32_RTC_CNT_DAY  ==================================================== */
/* =================================================  R8_SAFE_ACCESS_SIG_RD  ================================================= */
#define SYS_R8_SAFE_ACCESS_SIG_RD_RB_SAFE_ACC_MODE_Pos (0UL)        /*!< RB_SAFE_ACC_MODE (Bit 0)                              */
#define SYS_R8_SAFE_ACCESS_SIG_RD_RB_SAFE_ACC_MODE_Msk (0x3UL)      /*!< RB_SAFE_ACC_MODE (Bitfield-Mask: 0x03)                */
#define SYS_R8_SAFE_ACCESS_SIG_RD_RB_SAFE_ACC_ACT_Pos (3UL)         /*!< RB_SAFE_ACC_ACT (Bit 3)                               */
#define SYS_R8_SAFE_ACCESS_SIG_RD_RB_SAFE_ACC_ACT_Msk (0x8UL)       /*!< RB_SAFE_ACC_ACT (Bitfield-Mask: 0x01)                 */
#define SYS_R8_SAFE_ACCESS_SIG_RD_RB_SAFE_ACC_TIMER_Pos (4UL)       /*!< RB_SAFE_ACC_TIMER (Bit 4)                             */
#define SYS_R8_SAFE_ACCESS_SIG_RD_RB_SAFE_ACC_TIMER_Msk (0x70UL)    /*!< RB_SAFE_ACC_TIMER (Bitfield-Mask: 0x07)               */
/* =================================================  R8_SAFE_ACCESS_SIG_WR  ================================================= */
/* ======================================================  R8_CHIP_ID  ======================================================= */
/* ===================================================  R8_SAFE_ACCESS_ID  =================================================== */
/* =====================================================  R8_WDOG_COUNT  ===================================================== */
/* ====================================================  R8_RESET_STATUS  ==================================================== */
#define SYS_R8_RESET_STATUS_RB_RESET_FLAG_Pos (0UL)                 /*!< RB_RESET_FLAG (Bit 0)                                 */
#define SYS_R8_RESET_STATUS_RB_RESET_FLAG_Msk (0x7UL)               /*!< RB_RESET_FLAG (Bitfield-Mask: 0x07)                   */
#define SYS_R8_RESET_STATUS_RB_ROM_CODE_OFS_Pos (4UL)               /*!< RB_ROM_CODE_OFS (Bit 4)                               */
#define SYS_R8_RESET_STATUS_RB_ROM_CODE_OFS_Msk (0x10UL)            /*!< RB_ROM_CODE_OFS (Bitfield-Mask: 0x01)                 */
/* ===================================================  R8_GLOB_CFG_INFO  ==================================================== */
#define SYS_R8_GLOB_CFG_INFO_RB_CFG_ROM_READ_Pos (0UL)              /*!< RB_CFG_ROM_READ (Bit 0)                               */
#define SYS_R8_GLOB_CFG_INFO_RB_CFG_ROM_READ_Msk (0x1UL)            /*!< RB_CFG_ROM_READ (Bitfield-Mask: 0x01)                 */
#define SYS_R8_GLOB_CFG_INFO_RB_CFG_RESET_EN_Pos (2UL)              /*!< RB_CFG_RESET_EN (Bit 2)                               */
#define SYS_R8_GLOB_CFG_INFO_RB_CFG_RESET_EN_Msk (0x4UL)            /*!< RB_CFG_RESET_EN (Bitfield-Mask: 0x01)                 */
#define SYS_R8_GLOB_CFG_INFO_RB_CFG_BOOT_EN_Pos (3UL)               /*!< RB_CFG_BOOT_EN (Bit 3)                                */
#define SYS_R8_GLOB_CFG_INFO_RB_CFG_BOOT_EN_Msk (0x8UL)             /*!< RB_CFG_BOOT_EN (Bitfield-Mask: 0x01)                  */
#define SYS_R8_GLOB_CFG_INFO_RB_CFG_DEBUG_EN_Pos (4UL)              /*!< RB_CFG_DEBUG_EN (Bit 4)                               */
#define SYS_R8_GLOB_CFG_INFO_RB_CFG_DEBUG_EN_Msk (0x10UL)           /*!< RB_CFG_DEBUG_EN (Bitfield-Mask: 0x01)                 */
#define SYS_R8_GLOB_CFG_INFO_RB_BOOT_LOADER_Pos (5UL)               /*!< RB_BOOT_LOADER (Bit 5)                                */
#define SYS_R8_GLOB_CFG_INFO_RB_BOOT_LOADER_Msk (0x20UL)            /*!< RB_BOOT_LOADER (Bitfield-Mask: 0x01)                  */
/* ===================================================  R8_RST_WDOG_CTRL  ==================================================== */
#define SYS_R8_RST_WDOG_CTRL_RB_SOFTWARE_RESET_Pos (0UL)            /*!< RB_SOFTWARE_RESET (Bit 0)                             */
#define SYS_R8_RST_WDOG_CTRL_RB_SOFTWARE_RESET_Msk (0x1UL)          /*!< RB_SOFTWARE_RESET (Bitfield-Mask: 0x01)               */
#define SYS_R8_RST_WDOG_CTRL_RB_WDOG_RST_EN_Pos (1UL)               /*!< RB_WDOG_RST_EN (Bit 1)                                */
#define SYS_R8_RST_WDOG_CTRL_RB_WDOG_RST_EN_Msk (0x2UL)             /*!< RB_WDOG_RST_EN (Bitfield-Mask: 0x01)                  */
#define SYS_R8_RST_WDOG_CTRL_RB_WDOG_INT_EN_Pos (2UL)               /*!< RB_WDOG_INT_EN (Bit 2)                                */
#define SYS_R8_RST_WDOG_CTRL_RB_WDOG_INT_EN_Msk (0x4UL)             /*!< RB_WDOG_INT_EN (Bitfield-Mask: 0x01)                  */
#define SYS_R8_RST_WDOG_CTRL_RB_WDOG_INT_FLAG_Pos (4UL)             /*!< RB_WDOG_INT_FLAG (Bit 4)                              */
#define SYS_R8_RST_WDOG_CTRL_RB_WDOG_INT_FLAG_Msk (0x10UL)          /*!< RB_WDOG_INT_FLAG (Bitfield-Mask: 0x01)                */
/* ==================================================  R8_GLOB_RESET_KEEP  =================================================== */
/* =====================================================  R8_CFG_FLASH  ====================================================== */
#define SYS_R8_CFG_FLASH_RB_CFG_FLASH_X_Pos (0UL)                   /*!< RB_CFG_FLASH_X (Bit 0)                                */
#define SYS_R8_CFG_FLASH_RB_CFG_FLASH_X_Msk (0xfUL)                 /*!< RB_CFG_FLASH_X (Bitfield-Mask: 0x0f)                  */
#define SYS_R8_CFG_FLASH_RB_FLASH_BUSY_EN_Pos (7UL)                 /*!< RB_FLASH_BUSY_EN (Bit 7)                              */
#define SYS_R8_CFG_FLASH_RB_FLASH_BUSY_EN_Msk (0x80UL)              /*!< RB_FLASH_BUSY_EN (Bitfield-Mask: 0x01)                */
/* =====================================================  R8_PLL_CONFIG  ===================================================== */
#define SYS_R8_PLL_CONFIG_RB_PLL_CFG_DAT_Pos (0UL)                  /*!< RB_PLL_CFG_DAT (Bit 0)                                */
#define SYS_R8_PLL_CONFIG_RB_PLL_CFG_DAT_Msk (0x3UL)                /*!< RB_PLL_CFG_DAT (Bitfield-Mask: 0x03)                  */
#define SYS_R8_PLL_CONFIG_RB_PLL_LOCKED_Pos (7UL)                   /*!< RB_PLL_LOCKED (Bit 7)                                 */
#define SYS_R8_PLL_CONFIG_RB_PLL_LOCKED_Msk (0x80UL)                /*!< RB_PLL_LOCKED (Bitfield-Mask: 0x01)                   */
/* ===================================================  R16_INT32M_CALIB  ==================================================== */
/* =====================================================  R8_XT32M_TUNE  ===================================================== */
#define SYS_R8_XT32M_TUNE_RB_XT32M_I_BIAS_Pos (0UL)                 /*!< RB_XT32M_I_BIAS (Bit 0)                               */
#define SYS_R8_XT32M_TUNE_RB_XT32M_I_BIAS_Msk (0x3UL)               /*!< RB_XT32M_I_BIAS (Bitfield-Mask: 0x03)                 */
#define SYS_R8_XT32M_TUNE_RB_XT32M_C_LOAD_Pos (4UL)                 /*!< RB_XT32M_C_LOAD (Bit 4)                               */
#define SYS_R8_XT32M_TUNE_RB_XT32M_C_LOAD_Msk (0x70UL)              /*!< RB_XT32M_C_LOAD (Bitfield-Mask: 0x07)                 */
/* ====================================================  R16_OSC_CAL_CNT  ==================================================== */
#define SYS_R16_OSC_CAL_CNT_RB_OSC_CAL_CNT_Pos (0UL)                /*!< RB_OSC_CAL_CNT (Bit 0)                                */
#define SYS_R16_OSC_CAL_CNT_RB_OSC_CAL_CNT_Msk (0xfffUL)            /*!< RB_OSC_CAL_CNT (Bitfield-Mask: 0xfff)                 */
/* ====================================================  R8_OSC_CAL_CTRL  ==================================================== */
#define SYS_R8_OSC_CAL_CTRL_RB_OSC_CNT_EN_Pos (0UL)                 /*!< RB_OSC_CNT_EN (Bit 0)                                 */
#define SYS_R8_OSC_CAL_CTRL_RB_OSC_CNT_EN_Msk (0x1UL)               /*!< RB_OSC_CNT_EN (Bitfield-Mask: 0x01)                   */
#define SYS_R8_OSC_CAL_CTRL_RB_OSC_CNT_HALT_Pos (1UL)               /*!< RB_OSC_CNT_HALT (Bit 1)                               */
#define SYS_R8_OSC_CAL_CTRL_RB_OSC_CNT_HALT_Msk (0x2UL)             /*!< RB_OSC_CNT_HALT (Bitfield-Mask: 0x01)                 */
/* ====================================================  R8_ADC_CHANNEL  ===================================================== */
#define SYS_R8_ADC_CHANNEL_RB_ADC_CH_INX_Pos (0UL)                  /*!< RB_ADC_CH_INX (Bit 0)                                 */
#define SYS_R8_ADC_CHANNEL_RB_ADC_CH_INX_Msk (0xfUL)                /*!< RB_ADC_CH_INX (Bitfield-Mask: 0x0f)                   */
/* ======================================================  R8_ADC_CFG  ======================================================= */
#define SYS_R8_ADC_CFG_RB_ADC_POWER_ON_Pos (0UL)                    /*!< RB_ADC_POWER_ON (Bit 0)                               */
#define SYS_R8_ADC_CFG_RB_ADC_POWER_ON_Msk (0x1UL)                  /*!< RB_ADC_POWER_ON (Bitfield-Mask: 0x01)                 */
#define SYS_R8_ADC_CFG_RB_ADC_BUF_EN_Pos  (1UL)                     /*!< RB_ADC_BUF_EN (Bit 1)                                 */
#define SYS_R8_ADC_CFG_RB_ADC_BUF_EN_Msk  (0x2UL)                   /*!< RB_ADC_BUF_EN (Bitfield-Mask: 0x01)                   */
#define SYS_R8_ADC_CFG_RB_ADC_DIFF_EN_Pos (2UL)                     /*!< RB_ADC_DIFF_EN (Bit 2)                                */
#define SYS_R8_ADC_CFG_RB_ADC_DIFF_EN_Msk (0x4UL)                   /*!< RB_ADC_DIFF_EN (Bitfield-Mask: 0x01)                  */
#define SYS_R8_ADC_CFG_RB_ADC_OFS_TEST_Pos (3UL)                    /*!< RB_ADC_OFS_TEST (Bit 3)                               */
#define SYS_R8_ADC_CFG_RB_ADC_OFS_TEST_Msk (0x8UL)                  /*!< RB_ADC_OFS_TEST (Bitfield-Mask: 0x01)                 */
#define SYS_R8_ADC_CFG_RB_ADC_PGA_GAIN_Pos (4UL)                    /*!< RB_ADC_PGA_GAIN (Bit 4)                               */
#define SYS_R8_ADC_CFG_RB_ADC_PGA_GAIN_Msk (0x30UL)                 /*!< RB_ADC_PGA_GAIN (Bitfield-Mask: 0x03)                 */
#define SYS_R8_ADC_CFG_RB_ADC_CLK_DIV_Pos (6UL)                     /*!< RB_ADC_CLK_DIV (Bit 6)                                */
#define SYS_R8_ADC_CFG_RB_ADC_CLK_DIV_Msk (0xc0UL)                  /*!< RB_ADC_CLK_DIV (Bitfield-Mask: 0x03)                  */
/* ====================================================  R8_ADC_CONVERT  ===================================================== */
#define SYS_R8_ADC_CONVERT_RB_ADC_START_Pos (0UL)                   /*!< RB_ADC_START (Bit 0)                                  */
#define SYS_R8_ADC_CONVERT_RB_ADC_START_Msk (0x1UL)                 /*!< RB_ADC_START (Bitfield-Mask: 0x01)                    */
#define SYS_R8_ADC_CONVERT_RB_TKEY_PWR_ON_Pos (3UL)                 /*!< RB_TKEY_PWR_ON (Bit 3)                                */
#define SYS_R8_ADC_CONVERT_RB_TKEY_PWR_ON_Msk (0x8UL)               /*!< RB_TKEY_PWR_ON (Bitfield-Mask: 0x01)                  */
#define SYS_R8_ADC_CONVERT_RB_TKEY_ACTION_Pos (4UL)                 /*!< RB_TKEY_ACTION (Bit 4)                                */
#define SYS_R8_ADC_CONVERT_RB_TKEY_ACTION_Msk (0x10UL)              /*!< RB_TKEY_ACTION (Bitfield-Mask: 0x01)                  */
#define SYS_R8_ADC_CONVERT_RB_TKEY_CHG_ACT_Pos (5UL)                /*!< RB_TKEY_CHG_ACT (Bit 5)                               */
#define SYS_R8_ADC_CONVERT_RB_TKEY_CHG_ACT_Msk (0x20UL)             /*!< RB_TKEY_CHG_ACT (Bitfield-Mask: 0x01)                 */
#define SYS_R8_ADC_CONVERT_RB_ADC_EOC_X_Pos (7UL)                   /*!< RB_ADC_EOC_X (Bit 7)                                  */
#define SYS_R8_ADC_CONVERT_RB_ADC_EOC_X_Msk (0x80UL)                /*!< RB_ADC_EOC_X (Bitfield-Mask: 0x01)                    */
/* =====================================================  R8_TEM_SENSOR  ===================================================== */
#define SYS_R8_TEM_SENSOR_RB_TEM_SEN_CALIB_Pos (0UL)                /*!< RB_TEM_SEN_CALIB (Bit 0)                              */
#define SYS_R8_TEM_SENSOR_RB_TEM_SEN_CALIB_Msk (0x7UL)              /*!< RB_TEM_SEN_CALIB (Bitfield-Mask: 0x07)                */
#define SYS_R8_TEM_SENSOR_RB_TEM_SEN_PWR_ON_Pos (7UL)               /*!< RB_TEM_SEN_PWR_ON (Bit 7)                             */
#define SYS_R8_TEM_SENSOR_RB_TEM_SEN_PWR_ON_Msk (0x80UL)            /*!< RB_TEM_SEN_PWR_ON (Bitfield-Mask: 0x01)               */
/* =====================================================  R16_ADC_DATA  ====================================================== */
#define SYS_R16_ADC_DATA_RB_ADC_DATA_Pos  (0UL)                     /*!< RB_ADC_DATA (Bit 0)                                   */
#define SYS_R16_ADC_DATA_RB_ADC_DATA_Msk  (0xfffUL)                 /*!< RB_ADC_DATA (Bitfield-Mask: 0xfff)                    */
/* ====================================================  R8_ADC_INT_FLAG  ==================================================== */
#define SYS_R8_ADC_INT_FLAG_RB_ADC_IF_EOC_Pos (7UL)                 /*!< RB_ADC_IF_EOC (Bit 7)                                 */
#define SYS_R8_ADC_INT_FLAG_RB_ADC_IF_EOC_Msk (0x80UL)              /*!< RB_ADC_IF_EOC (Bitfield-Mask: 0x01)                   */
/* ======================================================  R8_TKEY_CNT  ====================================================== */
/* =====================================================  R16_PA_INT_EN  ===================================================== */
/* =====================================================  R16_PB_INT_EN  ===================================================== */
/* ====================================================  R16_PA_INT_MODE  ==================================================== */
/* ============================================  R16_PB_INT_MODE__R8_SLV_RD_STAT  ============================================ */
/* ====================================================  R8_SLV_WR_DATA  ===================================================== */
/* =====================================================  R16_PA_INT_IF  ===================================================== */
/* =====================================================  R16_PB_INT_IF  ===================================================== */
/* ======================================================  R32_PA_DIR  ======================================================= */
/* ======================================================  R32_PA_PIN  ======================================================= */
/* ======================================================  R32_PA_OUT  ======================================================= */
/* ======================================================  R32_PA_CLR  ======================================================= */
/* =======================================================  R32_PA_PU  ======================================================= */
/* =====================================================  R32_PA_PD_DRV  ===================================================== */
/* ======================================================  R32_PB_DIR  ======================================================= */
/* ======================================================  R32_PB_PIN  ======================================================= */
/* ==============================================  R32_PB_OUT__R8_SLV_RD_DATA  =============================================== */
/* ======================================================  R32_PB_CLR  ======================================================= */
/* =======================================================  R32_PB_PU  ======================================================= */
/* =====================================================  R32_PB_PD_DRV  ===================================================== */


/* =========================================================================================================================== */
/* ================                                           FLASH                                           ================ */
/* =========================================================================================================================== */

/* ====================================================  R32_FLASH_DATA  ===================================================== */
/* ====================================================  R32_FLASH_ADDR  ===================================================== */
/* ===================================================  R8_FLASH_COMMAND  ==================================================== */
/* ===================================================  R8_FLASH_PROTECT  ==================================================== */
#define FLASH_R8_FLASH_PROTECT_RB_ROM_WE_MUST_10_Pos (6UL)          /*!< RB_ROM_WE_MUST_10 (Bit 6)                             */
#define FLASH_R8_FLASH_PROTECT_RB_ROM_WE_MUST_10_Msk (0xc0UL)       /*!< RB_ROM_WE_MUST_10 (Bitfield-Mask: 0x03)               */
#define FLASH_R8_FLASH_PROTECT_RB_ROM_DATA_WE_Pos (2UL)             /*!< RB_ROM_DATA_WE (Bit 2)                                */
#define FLASH_R8_FLASH_PROTECT_RB_ROM_DATA_WE_Msk (0x4UL)           /*!< RB_ROM_DATA_WE (Bitfield-Mask: 0x01)                  */
#define FLASH_R8_FLASH_PROTECT_RB_ROM_CODE_WE_Pos (3UL)             /*!< RB_ROM_CODE_WE (Bit 3)                                */
#define FLASH_R8_FLASH_PROTECT_RB_ROM_CODE_WE_Msk (0x8UL)           /*!< RB_ROM_CODE_WE (Bitfield-Mask: 0x01)                  */
/* ===================================================  R16_FLASH_STATUS  ==================================================== */
#define FLASH_R16_FLASH_STATUS_RB_ROM_CMD_TOUT_Pos (0UL)            /*!< RB_ROM_CMD_TOUT (Bit 0)                               */
#define FLASH_R16_FLASH_STATUS_RB_ROM_CMD_TOUT_Msk (0x1UL)          /*!< RB_ROM_CMD_TOUT (Bitfield-Mask: 0x01)                 */
#define FLASH_R16_FLASH_STATUS_RB_ROM_CMD_ERR_Pos (1UL)             /*!< RB_ROM_CMD_ERR (Bit 1)                                */
#define FLASH_R16_FLASH_STATUS_RB_ROM_CMD_ERR_Msk (0x2UL)           /*!< RB_ROM_CMD_ERR (Bitfield-Mask: 0x01)                  */
#define FLASH_R16_FLASH_STATUS_RB_ROM_ADDR_OK_Pos (6UL)             /*!< RB_ROM_ADDR_OK (Bit 6)                                */
#define FLASH_R16_FLASH_STATUS_RB_ROM_ADDR_OK_Msk (0x40UL)          /*!< RB_ROM_ADDR_OK (Bitfield-Mask: 0x01)                  */
#define FLASH_R16_FLASH_STATUS_RB_ROM_READ_FREE_Pos (8UL)           /*!< RB_ROM_READ_FREE (Bit 8)                              */
#define FLASH_R16_FLASH_STATUS_RB_ROM_READ_FREE_Msk (0x100UL)       /*!< RB_ROM_READ_FREE (Bitfield-Mask: 0x01)                */


/* =========================================================================================================================== */
/* ================                                            TMR                                            ================ */
/* =========================================================================================================================== */

/* =====================================================  TMR_CTRL_MOD  ====================================================== */
#define TMR_CTRL_MOD_MODE_IN_Pos (0UL)                              /*!< MODE_IN (Bit 0)                                       */
#define TMR_CTRL_MOD_MODE_IN_Msk (0x1UL)                            /*!< MODE_IN (Bitfield-Mask: 0x01)                         */
#define TMR_CTRL_MOD_ALL_CLEAR_Pos (1UL)                            /*!< ALL_CLEAR (Bit 1)                                     */
#define TMR_CTRL_MOD_ALL_CLEAR_Msk (0x2UL)                          /*!< ALL_CLEAR (Bitfield-Mask: 0x01)                       */
#define TMR_CTRL_MOD_COUNT_EN_Pos (2UL)                             /*!< COUNT_EN (Bit 2)                                      */
#define TMR_CTRL_MOD_COUNT_EN_Msk (0x4UL)                           /*!< COUNT_EN (Bitfield-Mask: 0x01)                        */
#define TMR_CTRL_MOD_OUT_EN_Pos (3UL)                               /*!< OUT_EN (Bit 3)                                        */
#define TMR_CTRL_MOD_OUT_EN_Msk (0x8UL)                             /*!< OUT_EN (Bitfield-Mask: 0x01)                          */
#define TMR_CTRL_MOD_OUT_POLAR_COUNT_Pos (4UL)                      /*!< OUT_POLAR_COUNT (Bit 4)                               */
#define TMR_CTRL_MOD_OUT_POLAR_COUNT_Msk (0x10UL)                   /*!< OUT_POLAR_COUNT (Bitfield-Mask: 0x01)                 */
#define TMR_CTRL_MOD_PWM_REPEAT_EDGE_Pos (6UL)                      /*!< PWM_REPEAT_EDGE (Bit 6)                               */
#define TMR_CTRL_MOD_PWM_REPEAT_EDGE_Msk (0xc0UL)                   /*!< PWM_REPEAT_EDGE (Bitfield-Mask: 0x03)                 */
/* =====================================================  TMR_CTRL_DMA  ====================================================== */
#define TMR_CTRL_DMA_ENABLE_Pos (0UL)                               /*!< ENABLE (Bit 0)                                        */
#define TMR_CTRL_DMA_ENABLE_Msk (0x1UL)                             /*!< ENABLE (Bitfield-Mask: 0x01)                          */
#define TMR_CTRL_DMA_LOOP_Pos (2UL)                                 /*!< LOOP (Bit 2)                                          */
#define TMR_CTRL_DMA_LOOP_Msk (0x4UL)                               /*!< LOOP (Bitfield-Mask: 0x01)                            */
/* =====================================================  TMR_INTER_EN  ====================================================== */
#define TMR_INTER_EN_CYC_END_Pos (0UL)                              /*!< CYC_END (Bit 0)                                       */
#define TMR_INTER_EN_CYC_END_Msk (0x1UL)                            /*!< CYC_END (Bitfield-Mask: 0x01)                         */
#define TMR_INTER_EN_DATA_ACT_Pos (1UL)                             /*!< DATA_ACT (Bit 1)                                      */
#define TMR_INTER_EN_DATA_ACT_Msk (0x2UL)                           /*!< DATA_ACT (Bitfield-Mask: 0x01)                        */
#define TMR_INTER_EN_FIFO_HF_Pos (2UL)                              /*!< FIFO_HF (Bit 2)                                       */
#define TMR_INTER_EN_FIFO_HF_Msk (0x4UL)                            /*!< FIFO_HF (Bitfield-Mask: 0x01)                         */
#define TMR_INTER_EN_DMA_END_Pos (3UL)                              /*!< DMA_END (Bit 3)                                       */
#define TMR_INTER_EN_DMA_END_Msk (0x8UL)                            /*!< DMA_END (Bitfield-Mask: 0x01)                         */
#define TMR_INTER_EN_FIFO_OV_Pos (4UL)                              /*!< FIFO_OV (Bit 4)                                       */
#define TMR_INTER_EN_FIFO_OV_Msk (0x10UL)                           /*!< FIFO_OV (Bitfield-Mask: 0x01)                         */
/* =====================================================  TMR_INT_FLAG  ====================================================== */
#define TMR_INT_FLAG_CYC_END_Pos (0UL)                              /*!< CYC_END (Bit 0)                                       */
#define TMR_INT_FLAG_CYC_END_Msk (0x1UL)                            /*!< CYC_END (Bitfield-Mask: 0x01)                         */
#define TMR_INT_FLAG_DATA_ACT_Pos (1UL)                             /*!< DATA_ACT (Bit 1)                                      */
#define TMR_INT_FLAG_DATA_ACT_Msk (0x2UL)                           /*!< DATA_ACT (Bitfield-Mask: 0x01)                        */
#define TMR_INT_FLAG_FIFO_HF_Pos (2UL)                              /*!< FIFO_HF (Bit 2)                                       */
#define TMR_INT_FLAG_FIFO_HF_Msk (0x4UL)                            /*!< FIFO_HF (Bitfield-Mask: 0x01)                         */
#define TMR_INT_FLAG_DMA_END_Pos (3UL)                              /*!< DMA_END (Bit 3)                                       */
#define TMR_INT_FLAG_DMA_END_Msk (0x8UL)                            /*!< DMA_END (Bitfield-Mask: 0x01)                         */
#define TMR_INT_FLAG_FIFO_OV_Pos (4UL)                              /*!< FIFO_OV (Bit 4)                                       */
#define TMR_INT_FLAG_FIFO_OV_Msk (0x10UL)                           /*!< FIFO_OV (Bitfield-Mask: 0x01)                         */
/* ====================================================  TMR_FIFO_COUNT  ===================================================== */
/* =======================================================  TMR_COUNT  ======================================================= */
/* ======================================================  TMR_CNT_END  ====================================================== */
/* ======================================================  TMR_FIFO_RO  ====================================================== */
/* ======================================================  TMR_FIFO_WO  ====================================================== */
/* ======================================================  TMR_DMA_NOW  ====================================================== */
/* ======================================================  TMR_DMA_BEG  ====================================================== */
/* ======================================================  TMR_DMA_END  ====================================================== */


/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  UART_MCR  ======================================================== */
#define UART_MCR_DTR_Pos (0UL)                                      /*!< DTR (Bit 0)                                           */
#define UART_MCR_DTR_Msk (0x1UL)                                    /*!< DTR (Bitfield-Mask: 0x01)                             */
#define UART_MCR_RTS_Pos (1UL)                                      /*!< RTS (Bit 1)                                           */
#define UART_MCR_RTS_Msk (0x2UL)                                    /*!< RTS (Bitfield-Mask: 0x01)                             */
#define UART_MCR_OUT1_Pos (2UL)                                     /*!< OUT1 (Bit 2)                                          */
#define UART_MCR_OUT1_Msk (0x4UL)                                   /*!< OUT1 (Bitfield-Mask: 0x01)                            */
#define UART_MCR_OUT2_Pos (3UL)                                     /*!< OUT2 (Bit 3)                                          */
#define UART_MCR_OUT2_Msk (0x8UL)                                   /*!< OUT2 (Bitfield-Mask: 0x01)                            */
#define UART_MCR_LOOP_Pos (4UL)                                     /*!< LOOP (Bit 4)                                          */
#define UART_MCR_LOOP_Msk (0x10UL)                                  /*!< LOOP (Bitfield-Mask: 0x01)                            */
#define UART_MCR_AU_FLOW_EN_Pos (5UL)                               /*!< AU_FLOW_EN (Bit 5)                                    */
#define UART_MCR_AU_FLOW_EN_Msk (0x20UL)                            /*!< AU_FLOW_EN (Bitfield-Mask: 0x01)                      */
#define UART_MCR_TNOW_Pos (6UL)                                     /*!< TNOW (Bit 6)                                          */
#define UART_MCR_TNOW_Msk (0x40UL)                                  /*!< TNOW (Bitfield-Mask: 0x01)                            */
#define UART_MCR_HALF_Pos (7UL)                                     /*!< HALF (Bit 7)                                          */
#define UART_MCR_HALF_Msk (0x80UL)                                  /*!< HALF (Bitfield-Mask: 0x01)                            */
/* =======================================================  UART_IER  ======================================================== */
#define UART_IER_RECV_RDY_Pos (0UL)                                 /*!< RECV_RDY (Bit 0)                                      */
#define UART_IER_RECV_RDY_Msk (0x1UL)                               /*!< RECV_RDY (Bitfield-Mask: 0x01)                        */
#define UART_IER_THR_EMPTY_Pos (1UL)                                /*!< THR_EMPTY (Bit 1)                                     */
#define UART_IER_THR_EMPTY_Msk (0x2UL)                              /*!< THR_EMPTY (Bitfield-Mask: 0x01)                       */
#define UART_IER_LINE_STAT_Pos (2UL)                                /*!< LINE_STAT (Bit 2)                                     */
#define UART_IER_LINE_STAT_Msk (0x4UL)                              /*!< LINE_STAT (Bitfield-Mask: 0x01)                       */
#define UART_IER_MODEM_CHG_Pos (3UL)                                /*!< MODEM_CHG (Bit 3)                                     */
#define UART_IER_MODEM_CHG_Msk (0x8UL)                              /*!< MODEM_CHG (Bitfield-Mask: 0x01)                       */
#define UART_IER_DTR_EN_Pos (4UL)                                   /*!< DTR_EN (Bit 4)                                        */
#define UART_IER_DTR_EN_Msk (0x10UL)                                /*!< DTR_EN (Bitfield-Mask: 0x01)                          */
#define UART_IER_RTS_EN_Pos (5UL)                                   /*!< RTS_EN (Bit 5)                                        */
#define UART_IER_RTS_EN_Msk (0x20UL)                                /*!< RTS_EN (Bitfield-Mask: 0x01)                          */
#define UART_IER_TXD_EN_Pos (6UL)                                   /*!< TXD_EN (Bit 6)                                        */
#define UART_IER_TXD_EN_Msk (0x40UL)                                /*!< TXD_EN (Bitfield-Mask: 0x01)                          */
#define UART_IER_RESET_Pos (7UL)                                    /*!< RESET (Bit 7)                                         */
#define UART_IER_RESET_Msk (0x80UL)                                 /*!< RESET (Bitfield-Mask: 0x01)                           */
/* =======================================================  UART_FCR  ======================================================== */
#define UART_FCR_FIFO_EN_Pos (0UL)                                  /*!< FIFO_EN (Bit 0)                                       */
#define UART_FCR_FIFO_EN_Msk (0x1UL)                                /*!< FIFO_EN (Bitfield-Mask: 0x01)                         */
#define UART_FCR_RX_FIFO_CLR_Pos (1UL)                              /*!< RX_FIFO_CLR (Bit 1)                                   */
#define UART_FCR_RX_FIFO_CLR_Msk (0x2UL)                            /*!< RX_FIFO_CLR (Bitfield-Mask: 0x01)                     */
#define UART_FCR_TX_FIFO_CLR_Pos (2UL)                              /*!< TX_FIFO_CLR (Bit 2)                                   */
#define UART_FCR_TX_FIFO_CLR_Msk (0x4UL)                            /*!< TX_FIFO_CLR (Bitfield-Mask: 0x01)                     */
#define UART_FCR_FIFO_TRIG_Pos (6UL)                                /*!< FIFO_TRIG (Bit 6)                                     */
#define UART_FCR_FIFO_TRIG_Msk (0xc0UL)                             /*!< FIFO_TRIG (Bitfield-Mask: 0x03)                       */
/* =======================================================  UART_LCR  ======================================================== */
#define UART_LCR_WORD_SZ_Pos (0UL)                                  /*!< WORD_SZ (Bit 0)                                       */
#define UART_LCR_WORD_SZ_Msk (0x3UL)                                /*!< WORD_SZ (Bitfield-Mask: 0x03)                         */
#define UART_LCR_STOP_BIT_Pos (2UL)                                 /*!< STOP_BIT (Bit 2)                                      */
#define UART_LCR_STOP_BIT_Msk (0x4UL)                               /*!< STOP_BIT (Bitfield-Mask: 0x01)                        */
#define UART_LCR_PAR_EN_Pos (3UL)                                   /*!< PAR_EN (Bit 3)                                        */
#define UART_LCR_PAR_EN_Msk (0x8UL)                                 /*!< PAR_EN (Bitfield-Mask: 0x01)                          */
#define UART_LCR_PAR_MOD_Pos (4UL)                                  /*!< PAR_MOD (Bit 4)                                       */
#define UART_LCR_PAR_MOD_Msk (0x30UL)                               /*!< PAR_MOD (Bitfield-Mask: 0x03)                         */
#define UART_LCR_BREAK_EN_Pos (6UL)                                 /*!< BREAK_EN (Bit 6)                                      */
#define UART_LCR_BREAK_EN_Msk (0x40UL)                              /*!< BREAK_EN (Bitfield-Mask: 0x01)                        */
#define UART_LCR_GP_BIT__RB_LCR_DLAB_Pos (7UL)                      /*!< GP_BIT__RB_LCR_DLAB (Bit 7)                           */
#define UART_LCR_GP_BIT__RB_LCR_DLAB_Msk (0x80UL)                   /*!< GP_BIT__RB_LCR_DLAB (Bitfield-Mask: 0x01)             */
/* =======================================================  UART_IIR  ======================================================== */
#define UART_IIR_NO_INT_Pos (0UL)                                   /*!< NO_INT (Bit 0)                                        */
#define UART_IIR_NO_INT_Msk (0x1UL)                                 /*!< NO_INT (Bitfield-Mask: 0x01)                          */
#define UART_IIR_INT_MASK_Pos (1UL)                                 /*!< INT_MASK (Bit 1)                                      */
#define UART_IIR_INT_MASK_Msk (0xeUL)                               /*!< INT_MASK (Bitfield-Mask: 0x07)                        */
#define UART_IIR_FIFO_ID_Pos (7UL)                                  /*!< FIFO_ID (Bit 7)                                       */
#define UART_IIR_FIFO_ID_Msk (0x80UL)                               /*!< FIFO_ID (Bitfield-Mask: 0x01)                         */
/* =======================================================  UART_LSR  ======================================================== */
#define UART_LSR_DATA_RDY_Pos (0UL)                                 /*!< DATA_RDY (Bit 0)                                      */
#define UART_LSR_DATA_RDY_Msk (0x1UL)                               /*!< DATA_RDY (Bitfield-Mask: 0x01)                        */
#define UART_LSR_OVER_ERR_Pos (1UL)                                 /*!< OVER_ERR (Bit 1)                                      */
#define UART_LSR_OVER_ERR_Msk (0x2UL)                               /*!< OVER_ERR (Bitfield-Mask: 0x01)                        */
#define UART_LSR_PAR_ERR_Pos (2UL)                                  /*!< PAR_ERR (Bit 2)                                       */
#define UART_LSR_PAR_ERR_Msk (0x4UL)                                /*!< PAR_ERR (Bitfield-Mask: 0x01)                         */
#define UART_LSR_FRAME_ERR_Pos (3UL)                                /*!< FRAME_ERR (Bit 3)                                     */
#define UART_LSR_FRAME_ERR_Msk (0x8UL)                              /*!< FRAME_ERR (Bitfield-Mask: 0x01)                       */
#define UART_LSR_BREAK_ERR_Pos (4UL)                                /*!< BREAK_ERR (Bit 4)                                     */
#define UART_LSR_BREAK_ERR_Msk (0x10UL)                             /*!< BREAK_ERR (Bitfield-Mask: 0x01)                       */
#define UART_LSR_TX_FIFO_EMP_Pos (5UL)                              /*!< TX_FIFO_EMP (Bit 5)                                   */
#define UART_LSR_TX_FIFO_EMP_Msk (0x20UL)                           /*!< TX_FIFO_EMP (Bitfield-Mask: 0x01)                     */
#define UART_LSR_TX_ALL_EMP_Pos (6UL)                               /*!< TX_ALL_EMP (Bit 6)                                    */
#define UART_LSR_TX_ALL_EMP_Msk (0x40UL)                            /*!< TX_ALL_EMP (Bitfield-Mask: 0x01)                      */
#define UART_LSR_ERR_RX_FIFO_Pos (7UL)                              /*!< ERR_RX_FIFO (Bit 7)                                   */
#define UART_LSR_ERR_RX_FIFO_Msk (0x80UL)                           /*!< ERR_RX_FIFO (Bitfield-Mask: 0x01)                     */
/* =====================================================  R8_UART0_MSR  ====================================================== */
#define UART_MSR_CTS_CHG_Pos (0UL)                                  /*!< CTS_CHG (Bit 0)                                       */
#define UART_MSR_CTS_CHG_Msk (0x1UL)                                /*!< CTS_CHG (Bitfield-Mask: 0x01)                         */
#define UART_MSR_DSR_CHG_Pos (1UL)                                  /*!< DSR_CHG (Bit 1)                                       */
#define UART_MSR_DSR_CHG_Msk (0x2UL)                                /*!< DSR_CHG (Bitfield-Mask: 0x01)                         */
#define UART_MSR_RI_CHG_Pos (2UL)                                   /*!< RI_CHG (Bit 2)                                        */
#define UART_MSR_RI_CHG_Msk (0x4UL)                                 /*!< RI_CHG (Bitfield-Mask: 0x01)                          */
#define UART_MSR_DCD_CHG_Pos (3UL)                                  /*!< DCD_CHG (Bit 3)                                       */
#define UART_MSR_DCD_CHG_Msk (0x8UL)                                /*!< DCD_CHG (Bitfield-Mask: 0x01)                         */
#define UART_MSR_CTS_Pos (4UL)                                      /*!< CTS (Bit 4)                                           */
#define UART_MSR_CTS_Msk (0x10UL)                                   /*!< CTS (Bitfield-Mask: 0x01)                             */
#define UART_MSR_DSR_Pos (5UL)                                      /*!< DSR (Bit 5)                                           */
#define UART_MSR_DSR_Msk (0x20UL)                                   /*!< DSR (Bitfield-Mask: 0x01)                             */
#define UART_MSR_RI_Pos  (6UL)                                      /*!< RI (Bit 6)                                            */
#define UART_MSR_RI_Msk  (0x40UL)                                   /*!< RI (Bitfield-Mask: 0x01)                              */
#define UART_MSR_DCD_Pos (7UL)                                      /*!< DCD (Bit 7)                                           */
#define UART_MSR_DCD_Msk (0x80UL)                                   /*!< DCD (Bitfield-Mask: 0x01)                             */
/* =======================================================  UART_RBR  ======================================================== */
/* =======================================================  UART_THR  ======================================================== */
/* =======================================================  UART_RFC  ======================================================== */
/* =======================================================  UART_TFC  ======================================================== */
/* =======================================================  UART_DL  ========================================================= */
/* =======================================================  UART_DIV  ======================================================== */
/* =======================================================  UART_ADR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */

/* ===================================================  R8_SPI0_CTRL_MOD  ==================================================== */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_MODE_SLAVE_Pos (0UL)           /*!< RB_SPI_MODE_SLAVE (Bit 0)                             */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_MODE_SLAVE_Msk (0x1UL)         /*!< RB_SPI_MODE_SLAVE (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_ALL_CLEAR_Pos (1UL)            /*!< RB_SPI_ALL_CLEAR (Bit 1)                              */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_ALL_CLEAR_Msk (0x2UL)          /*!< RB_SPI_ALL_CLEAR (Bitfield-Mask: 0x01)                */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_2WIRE_MOD_Pos (2UL)            /*!< RB_SPI_2WIRE_MOD (Bit 2)                              */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_2WIRE_MOD_Msk (0x4UL)          /*!< RB_SPI_2WIRE_MOD (Bitfield-Mask: 0x01)                */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_MST_SCK_MOD__RB_SPI_SLV_CMD_MOD_Pos (3UL) /*!< RB_SPI_MST_SCK_MOD__RB_SPI_SLV_CMD_MOD (Bit 3) */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_MST_SCK_MOD__RB_SPI_SLV_CMD_MOD_Msk (0x8UL) /*!< RB_SPI_MST_SCK_MOD__RB_SPI_SLV_CMD_MOD (Bitfield-Mask: 0x01) */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_FIFO_DIR_Pos (4UL)             /*!< RB_SPI_FIFO_DIR (Bit 4)                               */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_FIFO_DIR_Msk (0x10UL)          /*!< RB_SPI_FIFO_DIR (Bitfield-Mask: 0x01)                 */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_SCK_OE_Pos (5UL)               /*!< RB_SPI_SCK_OE (Bit 5)                                 */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_SCK_OE_Msk (0x20UL)            /*!< RB_SPI_SCK_OE (Bitfield-Mask: 0x01)                   */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_MOSI_OE_Pos (6UL)              /*!< RB_SPI_MOSI_OE (Bit 6)                                */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_MOSI_OE_Msk (0x40UL)           /*!< RB_SPI_MOSI_OE (Bitfield-Mask: 0x01)                  */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_MISO_OE_Pos (7UL)              /*!< RB_SPI_MISO_OE (Bit 7)                                */
#define SPI0_R8_SPI0_CTRL_MOD_RB_SPI_MISO_OE_Msk (0x80UL)           /*!< RB_SPI_MISO_OE (Bitfield-Mask: 0x01)                  */
/* ===================================================  R8_SPI0_CTRL_CFG  ==================================================== */
#define SPI0_R8_SPI0_CTRL_CFG_RB_SPI_DMA_ENABLE_Pos (0UL)           /*!< RB_SPI_DMA_ENABLE (Bit 0)                             */
#define SPI0_R8_SPI0_CTRL_CFG_RB_SPI_DMA_ENABLE_Msk (0x1UL)         /*!< RB_SPI_DMA_ENABLE (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_CTRL_CFG_RB_SPI_DMA_LOOP_Pos (2UL)             /*!< RB_SPI_DMA_LOOP (Bit 2)                               */
#define SPI0_R8_SPI0_CTRL_CFG_RB_SPI_DMA_LOOP_Msk (0x4UL)           /*!< RB_SPI_DMA_LOOP (Bitfield-Mask: 0x01)                 */
#define SPI0_R8_SPI0_CTRL_CFG_RB_SPI_AUTO_IF_Pos (4UL)              /*!< RB_SPI_AUTO_IF (Bit 4)                                */
#define SPI0_R8_SPI0_CTRL_CFG_RB_SPI_AUTO_IF_Msk (0x10UL)           /*!< RB_SPI_AUTO_IF (Bitfield-Mask: 0x01)                  */
#define SPI0_R8_SPI0_CTRL_CFG_RB_SPI_BIT_ORDER_Pos (5UL)            /*!< RB_SPI_BIT_ORDER (Bit 5)                              */
#define SPI0_R8_SPI0_CTRL_CFG_RB_SPI_BIT_ORDER_Msk (0x20UL)         /*!< RB_SPI_BIT_ORDER (Bitfield-Mask: 0x01)                */
#define SPI0_R8_SPI0_CTRL_CFG_RB_SPI_MST_DLY_EN_Pos (6UL)           /*!< RB_SPI_MST_DLY_EN (Bit 6)                             */
#define SPI0_R8_SPI0_CTRL_CFG_RB_SPI_MST_DLY_EN_Msk (0x40UL)        /*!< RB_SPI_MST_DLY_EN (Bitfield-Mask: 0x01)               */
/* ===================================================  R8_SPI0_INTER_EN  ==================================================== */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_CNT_END_Pos (0UL)           /*!< RB_SPI_IE_CNT_END (Bit 0)                             */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_CNT_END_Msk (0x1UL)         /*!< RB_SPI_IE_CNT_END (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_BYTE_END_Pos (1UL)          /*!< RB_SPI_IE_BYTE_END (Bit 1)                            */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_BYTE_END_Msk (0x2UL)        /*!< RB_SPI_IE_BYTE_END (Bitfield-Mask: 0x01)              */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_FIFO_HF_Pos (2UL)           /*!< RB_SPI_IE_FIFO_HF (Bit 2)                             */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_FIFO_HF_Msk (0x4UL)         /*!< RB_SPI_IE_FIFO_HF (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_DMA_END_Pos (3UL)           /*!< RB_SPI_IE_DMA_END (Bit 3)                             */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_DMA_END_Msk (0x8UL)         /*!< RB_SPI_IE_DMA_END (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_FIFO_OV_Pos (4UL)           /*!< RB_SPI_IE_FIFO_OV (Bit 4)                             */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_FIFO_OV_Msk (0x10UL)        /*!< RB_SPI_IE_FIFO_OV (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_FST_BYTE_Pos (7UL)          /*!< RB_SPI_IE_FST_BYTE (Bit 7)                            */
#define SPI0_R8_SPI0_INTER_EN_RB_SPI_IE_FST_BYTE_Msk (0x80UL)       /*!< RB_SPI_IE_FST_BYTE (Bitfield-Mask: 0x01)              */
/* =========================================  R8_SPI0_CLOCK_DIV__R8_SPI0_SLAVE_PRE  ========================================== */
/* ====================================================  R8_SPI0_BUFFER  ===================================================== */
/* ===================================================  R8_SPI0_RUN_FLAG  ==================================================== */
#define SPI0_R8_SPI0_RUN_FLAG_RB_SPI_SLV_CMD_ACT_Pos (4UL)          /*!< RB_SPI_SLV_CMD_ACT (Bit 4)                            */
#define SPI0_R8_SPI0_RUN_FLAG_RB_SPI_SLV_CMD_ACT_Msk (0x10UL)       /*!< RB_SPI_SLV_CMD_ACT (Bitfield-Mask: 0x01)              */
#define SPI0_R8_SPI0_RUN_FLAG_RB_SPI_FIFO_READY_Pos (5UL)           /*!< RB_SPI_FIFO_READY (Bit 5)                             */
#define SPI0_R8_SPI0_RUN_FLAG_RB_SPI_FIFO_READY_Msk (0x20UL)        /*!< RB_SPI_FIFO_READY (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_RUN_FLAG_RB_SPI_SLV_CS_LOAD_Pos (6UL)          /*!< RB_SPI_SLV_CS_LOAD (Bit 6)                            */
#define SPI0_R8_SPI0_RUN_FLAG_RB_SPI_SLV_CS_LOAD_Msk (0x40UL)       /*!< RB_SPI_SLV_CS_LOAD (Bitfield-Mask: 0x01)              */
#define SPI0_R8_SPI0_RUN_FLAG_RB_SPI_SLV_SELECT_Pos (7UL)           /*!< RB_SPI_SLV_SELECT (Bit 7)                             */
#define SPI0_R8_SPI0_RUN_FLAG_RB_SPI_SLV_SELECT_Msk (0x80UL)        /*!< RB_SPI_SLV_SELECT (Bitfield-Mask: 0x01)               */
/* ===================================================  R8_SPI0_INT_FLAG  ==================================================== */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_CNT_END_Pos (0UL)           /*!< RB_SPI_IF_CNT_END (Bit 0)                             */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_CNT_END_Msk (0x1UL)         /*!< RB_SPI_IF_CNT_END (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_BYTE_END_Pos (1UL)          /*!< RB_SPI_IF_BYTE_END (Bit 1)                            */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_BYTE_END_Msk (0x2UL)        /*!< RB_SPI_IF_BYTE_END (Bitfield-Mask: 0x01)              */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_FIFO_HF_Pos (2UL)           /*!< RB_SPI_IF_FIFO_HF (Bit 2)                             */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_FIFO_HF_Msk (0x4UL)         /*!< RB_SPI_IF_FIFO_HF (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_DMA_END_Pos (3UL)           /*!< RB_SPI_IF_DMA_END (Bit 3)                             */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_DMA_END_Msk (0x8UL)         /*!< RB_SPI_IF_DMA_END (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_FIFO_OV_Pos (4UL)           /*!< RB_SPI_IF_FIFO_OV (Bit 4)                             */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_FIFO_OV_Msk (0x10UL)        /*!< RB_SPI_IF_FIFO_OV (Bitfield-Mask: 0x01)               */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_FREE_Pos (6UL)                 /*!< RB_SPI_FREE (Bit 6)                                   */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_FREE_Msk (0x40UL)              /*!< RB_SPI_FREE (Bitfield-Mask: 0x01)                     */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_FST_BYTE_Pos (7UL)          /*!< RB_SPI_IF_FST_BYTE (Bit 7)                            */
#define SPI0_R8_SPI0_INT_FLAG_RB_SPI_IF_FST_BYTE_Msk (0x80UL)       /*!< RB_SPI_IF_FST_BYTE (Bitfield-Mask: 0x01)              */
/* ==================================================  R8_SPI0_FIFO_COUNT  =================================================== */
/* ==================================================  R16_SPI0_TOTAL_CNT  =================================================== */
/* =====================================================  R8_SPI0_FIFO  ====================================================== */
/* ==================================================  R8_SPI0_FIFO_COUNT1  ================================================== */
/* ===================================================  R16_SPI0_DMA_NOW  ==================================================== */
/* ===================================================  R16_SPI0_DMA_BEG  ==================================================== */
/* ===================================================  R16_SPI0_DMA_END  ==================================================== */


/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */

/* ===================================================  R8_SPI1_CTRL_MOD  ==================================================== */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_ALL_CLEAR_Pos (1UL)            /*!< RB_SPI_ALL_CLEAR (Bit 1)                              */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_ALL_CLEAR_Msk (0x2UL)          /*!< RB_SPI_ALL_CLEAR (Bitfield-Mask: 0x01)                */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_MST_SCK_MOD__RB_SPI_SLV_CMD_MOD_Pos (3UL) /*!< RB_SPI_MST_SCK_MOD__RB_SPI_SLV_CMD_MOD (Bit 3) */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_MST_SCK_MOD__RB_SPI_SLV_CMD_MOD_Msk (0x8UL) /*!< RB_SPI_MST_SCK_MOD__RB_SPI_SLV_CMD_MOD (Bitfield-Mask: 0x01) */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_FIFO_DIR_Pos (4UL)             /*!< RB_SPI_FIFO_DIR (Bit 4)                               */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_FIFO_DIR_Msk (0x10UL)          /*!< RB_SPI_FIFO_DIR (Bitfield-Mask: 0x01)                 */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_SCK_OE_Pos (5UL)               /*!< RB_SPI_SCK_OE (Bit 5)                                 */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_SCK_OE_Msk (0x20UL)            /*!< RB_SPI_SCK_OE (Bitfield-Mask: 0x01)                   */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_MOSI_OE_Pos (6UL)              /*!< RB_SPI_MOSI_OE (Bit 6)                                */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_MOSI_OE_Msk (0x40UL)           /*!< RB_SPI_MOSI_OE (Bitfield-Mask: 0x01)                  */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_MISO_OE_Pos (7UL)              /*!< RB_SPI_MISO_OE (Bit 7)                                */
#define SPI1_R8_SPI1_CTRL_MOD_RB_SPI_MISO_OE_Msk (0x80UL)           /*!< RB_SPI_MISO_OE (Bitfield-Mask: 0x01)                  */
/* ===================================================  R8_SPI1_CTRL_CFG  ==================================================== */
#define SPI1_R8_SPI1_CTRL_CFG_RB_SPI_DMA_ENABLE_Pos (0UL)           /*!< RB_SPI_DMA_ENABLE (Bit 0)                             */
#define SPI1_R8_SPI1_CTRL_CFG_RB_SPI_DMA_ENABLE_Msk (0x1UL)         /*!< RB_SPI_DMA_ENABLE (Bitfield-Mask: 0x01)               */
#define SPI1_R8_SPI1_CTRL_CFG_RB_SPI_AUTO_IF_Pos (4UL)              /*!< RB_SPI_AUTO_IF (Bit 4)                                */
#define SPI1_R8_SPI1_CTRL_CFG_RB_SPI_AUTO_IF_Msk (0x10UL)           /*!< RB_SPI_AUTO_IF (Bitfield-Mask: 0x01)                  */
#define SPI1_R8_SPI1_CTRL_CFG_RB_SPI_BIT_ORDER_Pos (5UL)            /*!< RB_SPI_BIT_ORDER (Bit 5)                              */
#define SPI1_R8_SPI1_CTRL_CFG_RB_SPI_BIT_ORDER_Msk (0x20UL)         /*!< RB_SPI_BIT_ORDER (Bitfield-Mask: 0x01)                */
#define SPI1_R8_SPI1_CTRL_CFG_RB_SPI_MST_DLY_EN_Pos (6UL)           /*!< RB_SPI_MST_DLY_EN (Bit 6)                             */
#define SPI1_R8_SPI1_CTRL_CFG_RB_SPI_MST_DLY_EN_Msk (0x40UL)        /*!< RB_SPI_MST_DLY_EN (Bitfield-Mask: 0x01)               */
/* ===================================================  R8_SPI1_INTER_EN  ==================================================== */
#define SPI1_R8_SPI1_INTER_EN_RB_SPI_IE_CNT_END_Pos (0UL)           /*!< RB_SPI_IE_CNT_END (Bit 0)                             */
#define SPI1_R8_SPI1_INTER_EN_RB_SPI_IE_CNT_END_Msk (0x1UL)         /*!< RB_SPI_IE_CNT_END (Bitfield-Mask: 0x01)               */
#define SPI1_R8_SPI1_INTER_EN_RB_SPI_IE_BYTE_END_Pos (1UL)          /*!< RB_SPI_IE_BYTE_END (Bit 1)                            */
#define SPI1_R8_SPI1_INTER_EN_RB_SPI_IE_BYTE_END_Msk (0x2UL)        /*!< RB_SPI_IE_BYTE_END (Bitfield-Mask: 0x01)              */
#define SPI1_R8_SPI1_INTER_EN_RB_SPI_IE_FIFO_HF_Pos (2UL)           /*!< RB_SPI_IE_FIFO_HF (Bit 2)                             */
#define SPI1_R8_SPI1_INTER_EN_RB_SPI_IE_FIFO_HF_Msk (0x4UL)         /*!< RB_SPI_IE_FIFO_HF (Bitfield-Mask: 0x01)               */
/* ===================================================  R8_SPI1_CLOCK_DIV  =================================================== */
/* ====================================================  R8_SPI1_BUFFER  ===================================================== */
/* ===================================================  R8_SPI1_RUN_FLAG  ==================================================== */
#define SPI1_R8_SPI1_RUN_FLAG_RB_SPI_FIFO_READY_Pos (5UL)           /*!< RB_SPI_FIFO_READY (Bit 5)                             */
#define SPI1_R8_SPI1_RUN_FLAG_RB_SPI_FIFO_READY_Msk (0x20UL)        /*!< RB_SPI_FIFO_READY (Bitfield-Mask: 0x01)               */
/* ===================================================  R8_SPI1_INT_FLAG  ==================================================== */
#define SPI1_R8_SPI1_INT_FLAG_RB_SPI_IF_CNT_END_Pos (0UL)           /*!< RB_SPI_IF_CNT_END (Bit 0)                             */
#define SPI1_R8_SPI1_INT_FLAG_RB_SPI_IF_CNT_END_Msk (0x1UL)         /*!< RB_SPI_IF_CNT_END (Bitfield-Mask: 0x01)               */
#define SPI1_R8_SPI1_INT_FLAG_RB_SPI_IF_BYTE_END_Pos (1UL)          /*!< RB_SPI_IF_BYTE_END (Bit 1)                            */
#define SPI1_R8_SPI1_INT_FLAG_RB_SPI_IF_BYTE_END_Msk (0x2UL)        /*!< RB_SPI_IF_BYTE_END (Bitfield-Mask: 0x01)              */
#define SPI1_R8_SPI1_INT_FLAG_RB_SPI_IF_FIFO_HF_Pos (2UL)           /*!< RB_SPI_IF_FIFO_HF (Bit 2)                             */
#define SPI1_R8_SPI1_INT_FLAG_RB_SPI_IF_FIFO_HF_Msk (0x4UL)         /*!< RB_SPI_IF_FIFO_HF (Bitfield-Mask: 0x01)               */
#define SPI1_R8_SPI1_INT_FLAG_RB_SPI_IF_FIFO_OV_Pos (4UL)           /*!< RB_SPI_IF_FIFO_OV (Bit 4)                             */
#define SPI1_R8_SPI1_INT_FLAG_RB_SPI_IF_FIFO_OV_Msk (0x10UL)        /*!< RB_SPI_IF_FIFO_OV (Bitfield-Mask: 0x01)               */
#define SPI1_R8_SPI1_INT_FLAG_RB_SPI_FREE_Pos (6UL)                 /*!< RB_SPI_FREE (Bit 6)                                   */
#define SPI1_R8_SPI1_INT_FLAG_RB_SPI_FREE_Msk (0x40UL)              /*!< RB_SPI_FREE (Bitfield-Mask: 0x01)                     */
/* ==================================================  R8_SPI1_FIFO_COUNT  =================================================== */
/* ==================================================  R16_SPI1_TOTAL_CNT  =================================================== */
/* =====================================================  R8_SPI1_FIFO  ====================================================== */
/* ==================================================  R8_SPI1_FIFO_COUNT1  ================================================== */


/* =========================================================================================================================== */
/* ================                                           PWMx                                            ================ */
/* =========================================================================================================================== */

/* =====================================================  R8_PWM_OUT_EN  ===================================================== */
#define PWMx_R8_PWM_OUT_EN_RB_PWM4_OUT_EN_Pos (0UL)                 /*!< RB_PWM4_OUT_EN (Bit 0)                                */
#define PWMx_R8_PWM_OUT_EN_RB_PWM4_OUT_EN_Msk (0x1UL)               /*!< RB_PWM4_OUT_EN (Bitfield-Mask: 0x01)                  */
#define PWMx_R8_PWM_OUT_EN_RB_PWM5_OUT_EN_Pos (1UL)                 /*!< RB_PWM5_OUT_EN (Bit 1)                                */
#define PWMx_R8_PWM_OUT_EN_RB_PWM5_OUT_EN_Msk (0x2UL)               /*!< RB_PWM5_OUT_EN (Bitfield-Mask: 0x01)                  */
#define PWMx_R8_PWM_OUT_EN_RB_PWM6_OUT_EN_Pos (2UL)                 /*!< RB_PWM6_OUT_EN (Bit 2)                                */
#define PWMx_R8_PWM_OUT_EN_RB_PWM6_OUT_EN_Msk (0x4UL)               /*!< RB_PWM6_OUT_EN (Bitfield-Mask: 0x01)                  */
#define PWMx_R8_PWM_OUT_EN_RB_PWM7_OUT_EN_Pos (3UL)                 /*!< RB_PWM7_OUT_EN (Bit 3)                                */
#define PWMx_R8_PWM_OUT_EN_RB_PWM7_OUT_EN_Msk (0x8UL)               /*!< RB_PWM7_OUT_EN (Bitfield-Mask: 0x01)                  */
#define PWMx_R8_PWM_OUT_EN_RB_PWM8_OUT_EN_Pos (4UL)                 /*!< RB_PWM8_OUT_EN (Bit 4)                                */
#define PWMx_R8_PWM_OUT_EN_RB_PWM8_OUT_EN_Msk (0x10UL)              /*!< RB_PWM8_OUT_EN (Bitfield-Mask: 0x01)                  */
#define PWMx_R8_PWM_OUT_EN_RB_PWM9_OUT_EN_Pos (5UL)                 /*!< RB_PWM9_OUT_EN (Bit 5)                                */
#define PWMx_R8_PWM_OUT_EN_RB_PWM9_OUT_EN_Msk (0x20UL)              /*!< RB_PWM9_OUT_EN (Bitfield-Mask: 0x01)                  */
#define PWMx_R8_PWM_OUT_EN_RB_PWM10_OUT_EN_Pos (6UL)                /*!< RB_PWM10_OUT_EN (Bit 6)                               */
#define PWMx_R8_PWM_OUT_EN_RB_PWM10_OUT_EN_Msk (0x40UL)             /*!< RB_PWM10_OUT_EN (Bitfield-Mask: 0x01)                 */
#define PWMx_R8_PWM_OUT_EN_RB_PWM11_OUT_EN_Pos (7UL)                /*!< RB_PWM11_OUT_EN (Bit 7)                               */
#define PWMx_R8_PWM_OUT_EN_RB_PWM11_OUT_EN_Msk (0x80UL)             /*!< RB_PWM11_OUT_EN (Bitfield-Mask: 0x01)                 */
/* =====================================================  R8_PWM_POLAR  ====================================================== */
#define PWMx_R8_PWM_POLAR_RB_PWM4_POLAR_Pos (0UL)                   /*!< RB_PWM4_POLAR (Bit 0)                                 */
#define PWMx_R8_PWM_POLAR_RB_PWM4_POLAR_Msk (0x1UL)                 /*!< RB_PWM4_POLAR (Bitfield-Mask: 0x01)                   */
#define PWMx_R8_PWM_POLAR_RB_PWM5_POLAR_Pos (1UL)                   /*!< RB_PWM5_POLAR (Bit 1)                                 */
#define PWMx_R8_PWM_POLAR_RB_PWM5_POLAR_Msk (0x2UL)                 /*!< RB_PWM5_POLAR (Bitfield-Mask: 0x01)                   */
#define PWMx_R8_PWM_POLAR_RB_PWM6_POLAR_Pos (2UL)                   /*!< RB_PWM6_POLAR (Bit 2)                                 */
#define PWMx_R8_PWM_POLAR_RB_PWM6_POLAR_Msk (0x4UL)                 /*!< RB_PWM6_POLAR (Bitfield-Mask: 0x01)                   */
#define PWMx_R8_PWM_POLAR_RB_PWM7_POLAR_Pos (3UL)                   /*!< RB_PWM7_POLAR (Bit 3)                                 */
#define PWMx_R8_PWM_POLAR_RB_PWM7_POLAR_Msk (0x8UL)                 /*!< RB_PWM7_POLAR (Bitfield-Mask: 0x01)                   */
#define PWMx_R8_PWM_POLAR_RB_PWM8_POLAR_Pos (4UL)                   /*!< RB_PWM8_POLAR (Bit 4)                                 */
#define PWMx_R8_PWM_POLAR_RB_PWM8_POLAR_Msk (0x10UL)                /*!< RB_PWM8_POLAR (Bitfield-Mask: 0x01)                   */
#define PWMx_R8_PWM_POLAR_RB_PWM9_POLAR_Pos (5UL)                   /*!< RB_PWM9_POLAR (Bit 5)                                 */
#define PWMx_R8_PWM_POLAR_RB_PWM9_POLAR_Msk (0x20UL)                /*!< RB_PWM9_POLAR (Bitfield-Mask: 0x01)                   */
#define PWMx_R8_PWM_POLAR_RB_PWM10_POLAR_Pos (6UL)                  /*!< RB_PWM10_POLAR (Bit 6)                                */
#define PWMx_R8_PWM_POLAR_RB_PWM10_POLAR_Msk (0x40UL)               /*!< RB_PWM10_POLAR (Bitfield-Mask: 0x01)                  */
#define PWMx_R8_PWM_POLAR_RB_PWM11_POLAR_Pos (7UL)                  /*!< RB_PWM11_POLAR (Bit 7)                                */
#define PWMx_R8_PWM_POLAR_RB_PWM11_POLAR_Msk (0x80UL)               /*!< RB_PWM11_POLAR (Bitfield-Mask: 0x01)                  */
/* =====================================================  R8_PWM_CONFIG  ===================================================== */
#define PWMx_R8_PWM_CONFIG_RB_PWM_CYCLE_SEL_Pos (0UL)               /*!< RB_PWM_CYCLE_SEL (Bit 0)                              */
#define PWMx_R8_PWM_CONFIG_RB_PWM_CYCLE_SEL_Msk (0x1UL)             /*!< RB_PWM_CYCLE_SEL (Bitfield-Mask: 0x01)                */
#define PWMx_R8_PWM_CONFIG_RB_PWM_STAG_ST_Pos (1UL)                 /*!< RB_PWM_STAG_ST (Bit 1)                                */
#define PWMx_R8_PWM_CONFIG_RB_PWM_STAG_ST_Msk (0x2UL)               /*!< RB_PWM_STAG_ST (Bitfield-Mask: 0x01)                  */
#define PWMx_R8_PWM_CONFIG_RB_PWM_CYC_MOD_Pos (2UL)                 /*!< RB_PWM_CYC_MOD (Bit 2)                                */
#define PWMx_R8_PWM_CONFIG_RB_PWM_CYC_MOD_Msk (0xcUL)               /*!< RB_PWM_CYC_MOD (Bitfield-Mask: 0x03)                  */
#define PWMx_R8_PWM_CONFIG_RB_PWM4_5_STAG_EN_Pos (4UL)              /*!< RB_PWM4_5_STAG_EN (Bit 4)                             */
#define PWMx_R8_PWM_CONFIG_RB_PWM4_5_STAG_EN_Msk (0x10UL)           /*!< RB_PWM4_5_STAG_EN (Bitfield-Mask: 0x01)               */
#define PWMx_R8_PWM_CONFIG_RB_PWM6_7_STAG_EN_Pos (5UL)              /*!< RB_PWM6_7_STAG_EN (Bit 5)                             */
#define PWMx_R8_PWM_CONFIG_RB_PWM6_7_STAG_EN_Msk (0x20UL)           /*!< RB_PWM6_7_STAG_EN (Bitfield-Mask: 0x01)               */
#define PWMx_R8_PWM_CONFIG_RB_PWM8_9_STAG_EN_Pos (6UL)              /*!< RB_PWM8_9_STAG_EN (Bit 6)                             */
#define PWMx_R8_PWM_CONFIG_RB_PWM8_9_STAG_EN_Msk (0x40UL)           /*!< RB_PWM8_9_STAG_EN (Bitfield-Mask: 0x01)               */
#define PWMx_R8_PWM_CONFIG_RB_PWM10_11_STAG_EN_Pos (7UL)            /*!< RB_PWM10_11_STAG_EN (Bit 7)                           */
#define PWMx_R8_PWM_CONFIG_RB_PWM10_11_STAG_EN_Msk (0x80UL)         /*!< RB_PWM10_11_STAG_EN (Bitfield-Mask: 0x01)             */
/* ===================================================  R8_PWM_CLOCK_DIV  ==================================================== */
/* =====================================================  R8_PWM4_DATA  ====================================================== */
/* =====================================================  R8_PWM5_DATA  ====================================================== */
/* =====================================================  R8_PWM6_DATA  ====================================================== */
/* =====================================================  R8_PWM7_DATA  ====================================================== */
/* =====================================================  R8_PWM8_DATA  ====================================================== */
/* =====================================================  R8_PWM9_DATA  ====================================================== */
/* =====================================================  R8_PWM10_DATA  ===================================================== */
/* =====================================================  R8_PWM11_DATA  ===================================================== */


/* =========================================================================================================================== */
/* ================                                            LCD                                            ================ */
/* =========================================================================================================================== */

/* ====================================================  R8_LCD_CTRL_MOD  ==================================================== */
#define LCD_R8_LCD_CTRL_MOD_RB_SYS_POWER_ON_Pos (0UL)               /*!< RB_SYS_POWER_ON (Bit 0)                               */
#define LCD_R8_LCD_CTRL_MOD_RB_SYS_POWER_ON_Msk (0x1UL)             /*!< RB_SYS_POWER_ON (Bitfield-Mask: 0x01)                 */
#define LCD_R8_LCD_CTRL_MOD_RB_LCD_POWER_ON_Pos (1UL)               /*!< RB_LCD_POWER_ON (Bit 1)                               */
#define LCD_R8_LCD_CTRL_MOD_RB_LCD_POWER_ON_Msk (0x2UL)             /*!< RB_LCD_POWER_ON (Bitfield-Mask: 0x01)                 */
#define LCD_R8_LCD_CTRL_MOD_RB_LCD_BIAS_Pos (2UL)                   /*!< RB_LCD_BIAS (Bit 2)                                   */
#define LCD_R8_LCD_CTRL_MOD_RB_LCD_BIAS_Msk (0x4UL)                 /*!< RB_LCD_BIAS (Bitfield-Mask: 0x01)                     */
#define LCD_R8_LCD_CTRL_MOD_RB_LCD_DUTY_Pos (3UL)                   /*!< RB_LCD_DUTY (Bit 3)                                   */
#define LCD_R8_LCD_CTRL_MOD_RB_LCD_DUTY_Msk (0x18UL)                /*!< RB_LCD_DUTY (Bitfield-Mask: 0x03)                     */
#define LCD_R8_LCD_CTRL_MOD_RB_LCD_SCAN_CLK_Pos (5UL)               /*!< RB_LCD_SCAN_CLK (Bit 5)                               */
#define LCD_R8_LCD_CTRL_MOD_RB_LCD_SCAN_CLK_Msk (0x60UL)            /*!< RB_LCD_SCAN_CLK (Bitfield-Mask: 0x03)                 */
#define LCD_R8_LCD_CTRL_MOD_RB_LCD_V_SEL_Pos (7UL)                  /*!< RB_LCD_V_SEL (Bit 7)                                  */
#define LCD_R8_LCD_CTRL_MOD_RB_LCD_V_SEL_Msk (0x80UL)               /*!< RB_LCD_V_SEL (Bitfield-Mask: 0x01)                    */
/* =====================================================  R32_LCD_RAM0  ====================================================== */
/* =====================================================  R32_LCD_RAM1  ====================================================== */
/* =====================================================  R32_LCD_RAM2  ====================================================== */


/* =========================================================================================================================== */
/* ================                                            LED                                            ================ */
/* =========================================================================================================================== */

/* ====================================================  R8_LED_CTRL_MOD  ==================================================== */
#define LED_R8_LED_CTRL_MOD_RB_LED_BIT_ORDER_Pos (0UL)              /*!< RB_LED_BIT_ORDER (Bit 0)                              */
#define LED_R8_LED_CTRL_MOD_RB_LED_BIT_ORDER_Msk (0x1UL)            /*!< RB_LED_BIT_ORDER (Bitfield-Mask: 0x01)                */
#define LED_R8_LED_CTRL_MOD_RB_LED_ALL_CLEAR_Pos (1UL)              /*!< RB_LED_ALL_CLEAR (Bit 1)                              */
#define LED_R8_LED_CTRL_MOD_RB_LED_ALL_CLEAR_Msk (0x2UL)            /*!< RB_LED_ALL_CLEAR (Bitfield-Mask: 0x01)                */
#define LED_R8_LED_CTRL_MOD_RB_LED_OUT_POLAR_Pos (2UL)              /*!< RB_LED_OUT_POLAR (Bit 2)                              */
#define LED_R8_LED_CTRL_MOD_RB_LED_OUT_POLAR_Msk (0x4UL)            /*!< RB_LED_OUT_POLAR (Bitfield-Mask: 0x01)                */
#define LED_R8_LED_CTRL_MOD_RB_LED_OUT_EN_Pos (3UL)                 /*!< RB_LED_OUT_EN (Bit 3)                                 */
#define LED_R8_LED_CTRL_MOD_RB_LED_OUT_EN_Msk (0x8UL)               /*!< RB_LED_OUT_EN (Bitfield-Mask: 0x01)                   */
#define LED_R8_LED_CTRL_MOD_RB_LED_DMA_EN_Pos (4UL)                 /*!< RB_LED_DMA_EN (Bit 4)                                 */
#define LED_R8_LED_CTRL_MOD_RB_LED_DMA_EN_Msk (0x10UL)              /*!< RB_LED_DMA_EN (Bitfield-Mask: 0x01)                   */
#define LED_R8_LED_CTRL_MOD_RB_LED_IE_FIFO_Pos (5UL)                /*!< RB_LED_IE_FIFO (Bit 5)                                */
#define LED_R8_LED_CTRL_MOD_RB_LED_IE_FIFO_Msk (0x20UL)             /*!< RB_LED_IE_FIFO (Bitfield-Mask: 0x01)                  */
#define LED_R8_LED_CTRL_MOD_RB_LED_CHAN_MOD_Pos (6UL)               /*!< RB_LED_CHAN_MOD (Bit 6)                               */
#define LED_R8_LED_CTRL_MOD_RB_LED_CHAN_MOD_Msk (0xc0UL)            /*!< RB_LED_CHAN_MOD (Bitfield-Mask: 0x03)                 */
/* ===================================================  R8_LED_CLOCK_DIV  ==================================================== */
/* =====================================================  R8_LED_STATUS  ===================================================== */
#define LED_R8_LED_STATUS_RB_LED_FIFO_COUNT_Pos (0UL)               /*!< RB_LED_FIFO_COUNT (Bit 0)                             */
#define LED_R8_LED_STATUS_RB_LED_FIFO_COUNT_Msk (0x7UL)             /*!< RB_LED_FIFO_COUNT (Bitfield-Mask: 0x07)               */
#define LED_R8_LED_STATUS_RB_LED_CLOCK_Pos (4UL)                    /*!< RB_LED_CLOCK (Bit 4)                                  */
#define LED_R8_LED_STATUS_RB_LED_CLOCK_Msk (0x10UL)                 /*!< RB_LED_CLOCK (Bitfield-Mask: 0x01)                    */
#define LED_R8_LED_STATUS_RB_LED_IF_FIFO_Pos (5UL)                  /*!< RB_LED_IF_FIFO (Bit 5)                                */
#define LED_R8_LED_STATUS_RB_LED_IF_FIFO_Msk (0x20UL)               /*!< RB_LED_IF_FIFO (Bitfield-Mask: 0x01)                  */
#define LED_R8_LED_STATUS_RB_LED_FIFO_EMPTY_Pos (6UL)               /*!< RB_LED_FIFO_EMPTY (Bit 6)                             */
#define LED_R8_LED_STATUS_RB_LED_FIFO_EMPTY_Msk (0x40UL)            /*!< RB_LED_FIFO_EMPTY (Bitfield-Mask: 0x01)               */
#define LED_R8_LED_STATUS_RB_LED_IF_DMA_END_Pos (7UL)               /*!< RB_LED_IF_DMA_END (Bit 7)                             */
#define LED_R8_LED_STATUS_RB_LED_IF_DMA_END_Msk (0x80UL)            /*!< RB_LED_IF_DMA_END (Bitfield-Mask: 0x01)               */
/* =====================================================  R16_LED_FIFO  ====================================================== */
/* ====================================================  R16_LED_DMA_CNT  ==================================================== */
/* ===================================================  R16_LED_DMA_MAIN  ==================================================== */
/* ====================================================  R16_LED_DMA_AUX  ==================================================== */


/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  R8_USB_CTRL  ====================================================== */
#define USB_R8_USB_CTRL_RB_UC_DMA_EN_Pos  (0UL)                     /*!< RB_UC_DMA_EN (Bit 0)                                  */
#define USB_R8_USB_CTRL_RB_UC_DMA_EN_Msk  (0x1UL)                   /*!< RB_UC_DMA_EN (Bitfield-Mask: 0x01)                    */
#define USB_R8_USB_CTRL_RB_UC_CLR_ALL_Pos (1UL)                     /*!< RB_UC_CLR_ALL (Bit 1)                                 */
#define USB_R8_USB_CTRL_RB_UC_CLR_ALL_Msk (0x2UL)                   /*!< RB_UC_CLR_ALL (Bitfield-Mask: 0x01)                   */
#define USB_R8_USB_CTRL_RB_UC_RESET_SIE_Pos (2UL)                   /*!< RB_UC_RESET_SIE (Bit 2)                               */
#define USB_R8_USB_CTRL_RB_UC_RESET_SIE_Msk (0x4UL)                 /*!< RB_UC_RESET_SIE (Bitfield-Mask: 0x01)                 */
#define USB_R8_USB_CTRL_RB_UC_INT_BUSY_Pos (3UL)                    /*!< RB_UC_INT_BUSY (Bit 3)                                */
#define USB_R8_USB_CTRL_RB_UC_INT_BUSY_Msk (0x8UL)                  /*!< RB_UC_INT_BUSY (Bitfield-Mask: 0x01)                  */
#define USB_R8_USB_CTRL_MASK_UC_SYS_CTRL_Pos (4UL)                  /*!< MASK_UC_SYS_CTRL (Bit 4)                              */
#define USB_R8_USB_CTRL_MASK_UC_SYS_CTRL_Msk (0x30UL)               /*!< MASK_UC_SYS_CTRL (Bitfield-Mask: 0x03)                */
#define USB_R8_USB_CTRL_RB_UC_LOW_SPEED_Pos (6UL)                   /*!< RB_UC_LOW_SPEED (Bit 6)                               */
#define USB_R8_USB_CTRL_RB_UC_LOW_SPEED_Msk (0x40UL)                /*!< RB_UC_LOW_SPEED (Bitfield-Mask: 0x01)                 */
#define USB_R8_USB_CTRL_RB_UC_HOST_MODE_Pos (7UL)                   /*!< RB_UC_HOST_MODE (Bit 7)                               */
#define USB_R8_USB_CTRL_RB_UC_HOST_MODE_Msk (0x80UL)                /*!< RB_UC_HOST_MODE (Bitfield-Mask: 0x01)                 */
/* ==============================================  R8_UDEV_CTRL__R8_UHOST_CTRL  ============================================== */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_PORT_EN__RB_UH_PORT_EN_Pos (0UL) /*!< RB_UD_PORT_EN__RB_UH_PORT_EN (Bit 0)       */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_PORT_EN__RB_UH_PORT_EN_Msk (0x1UL) /*!< RB_UD_PORT_EN__RB_UH_PORT_EN (Bitfield-Mask: 0x01) */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_GP_BIT__RB_UH_BUS_RESET_Pos (1UL) /*!< RB_UD_GP_BIT__RB_UH_BUS_RESET (Bit 1)     */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_GP_BIT__RB_UH_BUS_RESET_Msk (0x2UL) /*!< RB_UD_GP_BIT__RB_UH_BUS_RESET (Bitfield-Mask: 0x01) */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_Pos (2UL) /*!< RB_UD_LOW_SPEED__RB_UH_LOW_SPEED (Bit 2) */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_LOW_SPEED__RB_UH_LOW_SPEED_Msk (0x4UL) /*!< RB_UD_LOW_SPEED__RB_UH_LOW_SPEED (Bitfield-Mask: 0x01) */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_DM_PIN__RB_UH_DM_PIN_Pos (4UL) /*!< RB_UD_DM_PIN__RB_UH_DM_PIN (Bit 4)           */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_DM_PIN__RB_UH_DM_PIN_Msk (0x10UL) /*!< RB_UD_DM_PIN__RB_UH_DM_PIN (Bitfield-Mask: 0x01) */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_DP_PIN__RB_UH_DP_PIN_Pos (5UL) /*!< RB_UD_DP_PIN__RB_UH_DP_PIN (Bit 5)           */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_DP_PIN__RB_UH_DP_PIN_Msk (0x20UL) /*!< RB_UD_DP_PIN__RB_UH_DP_PIN (Bitfield-Mask: 0x01) */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_PD_DIS__RB_UH_PD_DIS_Pos (7UL) /*!< RB_UD_PD_DIS__RB_UH_PD_DIS (Bit 7)           */
#define USB_R8_UDEV_CTRL__R8_UHOST_CTRL_RB_UD_PD_DIS__RB_UH_PD_DIS_Msk (0x80UL) /*!< RB_UD_PD_DIS__RB_UH_PD_DIS (Bitfield-Mask: 0x01) */
/* =====================================================  R8_USB_INT_EN  ===================================================== */
#define USB_R8_USB_INT_EN_RB_UIE_BUS_RST__RB_UIE_DETECT_Pos (0UL)   /*!< RB_UIE_BUS_RST__RB_UIE_DETECT (Bit 0)                 */
#define USB_R8_USB_INT_EN_RB_UIE_BUS_RST__RB_UIE_DETECT_Msk (0x1UL) /*!< RB_UIE_BUS_RST__RB_UIE_DETECT (Bitfield-Mask: 0x01)   */
#define USB_R8_USB_INT_EN_RB_UIE_TRANSFER_Pos (1UL)                 /*!< RB_UIE_TRANSFER (Bit 1)                               */
#define USB_R8_USB_INT_EN_RB_UIE_TRANSFER_Msk (0x2UL)               /*!< RB_UIE_TRANSFER (Bitfield-Mask: 0x01)                 */
#define USB_R8_USB_INT_EN_RB_UIE_SUSPEND_Pos (2UL)                  /*!< RB_UIE_SUSPEND (Bit 2)                                */
#define USB_R8_USB_INT_EN_RB_UIE_SUSPEND_Msk (0x4UL)                /*!< RB_UIE_SUSPEND (Bitfield-Mask: 0x01)                  */
#define USB_R8_USB_INT_EN_RB_UIE_HST_SOF_Pos (3UL)                  /*!< RB_UIE_HST_SOF (Bit 3)                                */
#define USB_R8_USB_INT_EN_RB_UIE_HST_SOF_Msk (0x8UL)                /*!< RB_UIE_HST_SOF (Bitfield-Mask: 0x01)                  */
#define USB_R8_USB_INT_EN_RB_UIE_FIFO_OV_Pos (4UL)                  /*!< RB_UIE_FIFO_OV (Bit 4)                                */
#define USB_R8_USB_INT_EN_RB_UIE_FIFO_OV_Msk (0x10UL)               /*!< RB_UIE_FIFO_OV (Bitfield-Mask: 0x01)                  */
#define USB_R8_USB_INT_EN_RB_UIE_DEV_NAK_Pos (6UL)                  /*!< RB_UIE_DEV_NAK (Bit 6)                                */
#define USB_R8_USB_INT_EN_RB_UIE_DEV_NAK_Msk (0x40UL)               /*!< RB_UIE_DEV_NAK (Bitfield-Mask: 0x01)                  */
#define USB_R8_USB_INT_EN_RB_UIE_DEV_SOF_Pos (7UL)                  /*!< RB_UIE_DEV_SOF (Bit 7)                                */
#define USB_R8_USB_INT_EN_RB_UIE_DEV_SOF_Msk (0x80UL)               /*!< RB_UIE_DEV_SOF (Bitfield-Mask: 0x01)                  */
/* =====================================================  R8_USB_DEV_AD  ===================================================== */
#define USB_R8_USB_DEV_AD_MASK_USB_ADDR_Pos (0UL)                   /*!< MASK_USB_ADDR (Bit 0)                                 */
#define USB_R8_USB_DEV_AD_MASK_USB_ADDR_Msk (0x7fUL)                /*!< MASK_USB_ADDR (Bitfield-Mask: 0x7f)                   */
#define USB_R8_USB_DEV_AD_RB_UDA_GP_BIT_Pos (7UL)                   /*!< RB_UDA_GP_BIT (Bit 7)                                 */
#define USB_R8_USB_DEV_AD_RB_UDA_GP_BIT_Msk (0x80UL)                /*!< RB_UDA_GP_BIT (Bitfield-Mask: 0x01)                   */
/* =====================================================  R8_USB_MIS_ST  ===================================================== */
#define USB_R8_USB_MIS_ST_RB_UMS_DEV_ATTACH_Pos (0UL)               /*!< RB_UMS_DEV_ATTACH (Bit 0)                             */
#define USB_R8_USB_MIS_ST_RB_UMS_DEV_ATTACH_Msk (0x1UL)             /*!< RB_UMS_DEV_ATTACH (Bitfield-Mask: 0x01)               */
#define USB_R8_USB_MIS_ST_RB_UMS_DM_LEVEL_Pos (1UL)                 /*!< RB_UMS_DM_LEVEL (Bit 1)                               */
#define USB_R8_USB_MIS_ST_RB_UMS_DM_LEVEL_Msk (0x2UL)               /*!< RB_UMS_DM_LEVEL (Bitfield-Mask: 0x01)                 */
#define USB_R8_USB_MIS_ST_RB_UMS_SUSPEND_Pos (2UL)                  /*!< RB_UMS_SUSPEND (Bit 2)                                */
#define USB_R8_USB_MIS_ST_RB_UMS_SUSPEND_Msk (0x4UL)                /*!< RB_UMS_SUSPEND (Bitfield-Mask: 0x01)                  */
#define USB_R8_USB_MIS_ST_RB_UMS_BUS_RESET_Pos (3UL)                /*!< RB_UMS_BUS_RESET (Bit 3)                              */
#define USB_R8_USB_MIS_ST_RB_UMS_BUS_RESET_Msk (0x8UL)              /*!< RB_UMS_BUS_RESET (Bitfield-Mask: 0x01)                */
#define USB_R8_USB_MIS_ST_RB_UMS_R_FIFO_RDY_Pos (4UL)               /*!< RB_UMS_R_FIFO_RDY (Bit 4)                             */
#define USB_R8_USB_MIS_ST_RB_UMS_R_FIFO_RDY_Msk (0x10UL)            /*!< RB_UMS_R_FIFO_RDY (Bitfield-Mask: 0x01)               */
#define USB_R8_USB_MIS_ST_RB_UMS_SIE_FREE_Pos (5UL)                 /*!< RB_UMS_SIE_FREE (Bit 5)                               */
#define USB_R8_USB_MIS_ST_RB_UMS_SIE_FREE_Msk (0x20UL)              /*!< RB_UMS_SIE_FREE (Bitfield-Mask: 0x01)                 */
#define USB_R8_USB_MIS_ST_RB_UMS_SOF_ACT_Pos (6UL)                  /*!< RB_UMS_SOF_ACT (Bit 6)                                */
#define USB_R8_USB_MIS_ST_RB_UMS_SOF_ACT_Msk (0x40UL)               /*!< RB_UMS_SOF_ACT (Bitfield-Mask: 0x01)                  */
#define USB_R8_USB_MIS_ST_RB_UMS_SOF_PRES_Pos (7UL)                 /*!< RB_UMS_SOF_PRES (Bit 7)                               */
#define USB_R8_USB_MIS_ST_RB_UMS_SOF_PRES_Msk (0x80UL)              /*!< RB_UMS_SOF_PRES (Bitfield-Mask: 0x01)                 */
/* =====================================================  R8_USB_INT_FG  ===================================================== */
#define USB_R8_USB_INT_FG_RB_UIF_BUS_RST__RB_UIF_DETECT_Pos (0UL)   /*!< RB_UIF_BUS_RST__RB_UIF_DETECT (Bit 0)                 */
#define USB_R8_USB_INT_FG_RB_UIF_BUS_RST__RB_UIF_DETECT_Msk (0x1UL) /*!< RB_UIF_BUS_RST__RB_UIF_DETECT (Bitfield-Mask: 0x01)   */
#define USB_R8_USB_INT_FG_RB_UIF_TRANSFER_Pos (1UL)                 /*!< RB_UIF_TRANSFER (Bit 1)                               */
#define USB_R8_USB_INT_FG_RB_UIF_TRANSFER_Msk (0x2UL)               /*!< RB_UIF_TRANSFER (Bitfield-Mask: 0x01)                 */
#define USB_R8_USB_INT_FG_RB_UIF_SUSPEND_Pos (2UL)                  /*!< RB_UIF_SUSPEND (Bit 2)                                */
#define USB_R8_USB_INT_FG_RB_UIF_SUSPEND_Msk (0x4UL)                /*!< RB_UIF_SUSPEND (Bitfield-Mask: 0x01)                  */
#define USB_R8_USB_INT_FG_RB_UIF_HST_SOF_Pos (3UL)                  /*!< RB_UIF_HST_SOF (Bit 3)                                */
#define USB_R8_USB_INT_FG_RB_UIF_HST_SOF_Msk (0x8UL)                /*!< RB_UIF_HST_SOF (Bitfield-Mask: 0x01)                  */
#define USB_R8_USB_INT_FG_RB_UIF_FIFO_OV_Pos (4UL)                  /*!< RB_UIF_FIFO_OV (Bit 4)                                */
#define USB_R8_USB_INT_FG_RB_UIF_FIFO_OV_Msk (0x10UL)               /*!< RB_UIF_FIFO_OV (Bitfield-Mask: 0x01)                  */
#define USB_R8_USB_INT_FG_RB_U_SIE_FREE_Pos (5UL)                   /*!< RB_U_SIE_FREE (Bit 5)                                 */
#define USB_R8_USB_INT_FG_RB_U_SIE_FREE_Msk (0x20UL)                /*!< RB_U_SIE_FREE (Bitfield-Mask: 0x01)                   */
#define USB_R8_USB_INT_FG_RB_U_TOG_OK_Pos (6UL)                     /*!< RB_U_TOG_OK (Bit 6)                                   */
#define USB_R8_USB_INT_FG_RB_U_TOG_OK_Msk (0x40UL)                  /*!< RB_U_TOG_OK (Bitfield-Mask: 0x01)                     */
#define USB_R8_USB_INT_FG_RB_U_IS_NAK_Pos (7UL)                     /*!< RB_U_IS_NAK (Bit 7)                                   */
#define USB_R8_USB_INT_FG_RB_U_IS_NAK_Msk (0x80UL)                  /*!< RB_U_IS_NAK (Bitfield-Mask: 0x01)                     */
/* =====================================================  R8_USB_INT_ST  ===================================================== */
#define USB_R8_USB_INT_ST_MASK_UIS_H_RES__MASK_UIS_ENDP_Pos (0UL)   /*!< MASK_UIS_H_RES__MASK_UIS_ENDP (Bit 0)                 */
#define USB_R8_USB_INT_ST_MASK_UIS_H_RES__MASK_UIS_ENDP_Msk (0xfUL) /*!< MASK_UIS_H_RES__MASK_UIS_ENDP (Bitfield-Mask: 0x0f)   */
#define USB_R8_USB_INT_ST_MASK_UIS_TOKEN_Pos (4UL)                  /*!< MASK_UIS_TOKEN (Bit 4)                                */
#define USB_R8_USB_INT_ST_MASK_UIS_TOKEN_Msk (0x30UL)               /*!< MASK_UIS_TOKEN (Bitfield-Mask: 0x03)                  */
#define USB_R8_USB_INT_ST_RB_UIS_TOG_OK_Pos (6UL)                   /*!< RB_UIS_TOG_OK (Bit 6)                                 */
#define USB_R8_USB_INT_ST_RB_UIS_TOG_OK_Msk (0x40UL)                /*!< RB_UIS_TOG_OK (Bitfield-Mask: 0x01)                   */
#define USB_R8_USB_INT_ST_RB_UIS_IS_NAK_Pos (7UL)                   /*!< RB_UIS_IS_NAK (Bit 7)                                 */
#define USB_R8_USB_INT_ST_RB_UIS_IS_NAK_Msk (0x80UL)                /*!< RB_UIS_IS_NAK (Bitfield-Mask: 0x01)                   */
/* =====================================================  R8_USB_RX_LEN  ===================================================== */
/* =====================================================  R8_UEP4_1_MOD  ===================================================== */
#define USB_R8_UEP4_1_MOD_RB_UEP4_TX_EN_Pos (2UL)                   /*!< RB_UEP4_TX_EN (Bit 2)                                 */
#define USB_R8_UEP4_1_MOD_RB_UEP4_TX_EN_Msk (0x4UL)                 /*!< RB_UEP4_TX_EN (Bitfield-Mask: 0x01)                   */
#define USB_R8_UEP4_1_MOD_RB_UEP4_RX_EN_Pos (3UL)                   /*!< RB_UEP4_RX_EN (Bit 3)                                 */
#define USB_R8_UEP4_1_MOD_RB_UEP4_RX_EN_Msk (0x8UL)                 /*!< RB_UEP4_RX_EN (Bitfield-Mask: 0x01)                   */
#define USB_R8_UEP4_1_MOD_RB_UEP1_BUF_MOD_Pos (4UL)                 /*!< RB_UEP1_BUF_MOD (Bit 4)                               */
#define USB_R8_UEP4_1_MOD_RB_UEP1_BUF_MOD_Msk (0x10UL)              /*!< RB_UEP1_BUF_MOD (Bitfield-Mask: 0x01)                 */
#define USB_R8_UEP4_1_MOD_RB_UEP1_TX_EN_Pos (6UL)                   /*!< RB_UEP1_TX_EN (Bit 6)                                 */
#define USB_R8_UEP4_1_MOD_RB_UEP1_TX_EN_Msk (0x40UL)                /*!< RB_UEP1_TX_EN (Bitfield-Mask: 0x01)                   */
#define USB_R8_UEP4_1_MOD_RB_UEP1_RX_EN_Pos (7UL)                   /*!< RB_UEP1_RX_EN (Bit 7)                                 */
#define USB_R8_UEP4_1_MOD_RB_UEP1_RX_EN_Msk (0x80UL)                /*!< RB_UEP1_RX_EN (Bitfield-Mask: 0x01)                   */
/* ==============================================  R8_UEP2_3_MOD__R8_UH_EP_MOD  ============================================== */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_Pos (0UL) /*!< RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD (Bit 0) */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD_Msk (0x1UL) /*!< RB_UEP2_BUF_MOD__RB_UH_EP_RBUF_MOD (Bitfield-Mask: 0x01) */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP2_TX_EN_Pos (2UL)     /*!< RB_UEP2_TX_EN (Bit 2)                                 */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP2_TX_EN_Msk (0x4UL)   /*!< RB_UEP2_TX_EN (Bitfield-Mask: 0x01)                   */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP2_RX_EN__RB_UH_EP_RX_EN_Pos (3UL) /*!< RB_UEP2_RX_EN__RB_UH_EP_RX_EN (Bit 3)     */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP2_RX_EN__RB_UH_EP_RX_EN_Msk (0x8UL) /*!< RB_UEP2_RX_EN__RB_UH_EP_RX_EN (Bitfield-Mask: 0x01) */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_Pos (4UL) /*!< RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD (Bit 4) */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD_Msk (0x10UL) /*!< RB_UEP3_BUF_MOD__RB_UH_EP_TBUF_MOD (Bitfield-Mask: 0x01) */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP3_TX_EN__RB_UH_EP_TX_EN_Pos (6UL) /*!< RB_UEP3_TX_EN__RB_UH_EP_TX_EN (Bit 6)     */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP3_TX_EN__RB_UH_EP_TX_EN_Msk (0x40UL) /*!< RB_UEP3_TX_EN__RB_UH_EP_TX_EN (Bitfield-Mask: 0x01) */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP3_RX_EN_Pos (7UL)     /*!< RB_UEP3_RX_EN (Bit 7)                                 */
#define USB_R8_UEP2_3_MOD__R8_UH_EP_MOD_RB_UEP3_RX_EN_Msk (0x80UL)  /*!< RB_UEP3_RX_EN (Bitfield-Mask: 0x01)                   */
/* =====================================================  R16_UEP0_DMA  ====================================================== */
/* =====================================================  R16_UEP1_DMA  ====================================================== */
/* ==============================================  R16_UEP2_DMA__R16_UH_RX_DMA  ============================================== */
/* ==============================================  R16_UEP3_DMA__R16_UH_TX_DMA  ============================================== */
/* =====================================================  R8_UEP0_T_LEN  ===================================================== */
/* =====================================================  R8_UEP0_CTRL  ====================================================== */
#define USB_R8_UEP0_CTRL_MASK_UEP_T_RES_Pos (0UL)                   /*!< MASK_UEP_T_RES (Bit 0)                                */
#define USB_R8_UEP0_CTRL_MASK_UEP_T_RES_Msk (0x3UL)                 /*!< MASK_UEP_T_RES (Bitfield-Mask: 0x03)                  */
#define USB_R8_UEP0_CTRL_MASK_UEP_R_RES_Pos (2UL)                   /*!< MASK_UEP_R_RES (Bit 2)                                */
#define USB_R8_UEP0_CTRL_MASK_UEP_R_RES_Msk (0xcUL)                 /*!< MASK_UEP_R_RES (Bitfield-Mask: 0x03)                  */
#define USB_R8_UEP0_CTRL_RB_UEP_AUTO_TOG_Pos (4UL)                  /*!< RB_UEP_AUTO_TOG (Bit 4)                               */
#define USB_R8_UEP0_CTRL_RB_UEP_AUTO_TOG_Msk (0x10UL)               /*!< RB_UEP_AUTO_TOG (Bitfield-Mask: 0x01)                 */
#define USB_R8_UEP0_CTRL_RB_UEP_T_TOG_Pos (6UL)                     /*!< RB_UEP_T_TOG (Bit 6)                                  */
#define USB_R8_UEP0_CTRL_RB_UEP_T_TOG_Msk (0x40UL)                  /*!< RB_UEP_T_TOG (Bitfield-Mask: 0x01)                    */
#define USB_R8_UEP0_CTRL_RB_UEP_R_TOG_Pos (7UL)                     /*!< RB_UEP_R_TOG (Bit 7)                                  */
#define USB_R8_UEP0_CTRL_RB_UEP_R_TOG_Msk (0x80UL)                  /*!< RB_UEP_R_TOG (Bitfield-Mask: 0x01)                    */
/* =====================================================  R8_UEP1_T_LEN  ===================================================== */
/* ===============================================  R8_UEP1_CTRL__R8_UH_SETUP  =============================================== */
#define USB_R8_UEP1_CTRL__R8_UH_SETUP_MASK_UEP_T_RES_Pos (0UL)      /*!< MASK_UEP_T_RES (Bit 0)                                */
#define USB_R8_UEP1_CTRL__R8_UH_SETUP_MASK_UEP_T_RES_Msk (0x3UL)    /*!< MASK_UEP_T_RES (Bitfield-Mask: 0x03)                  */
#define USB_R8_UEP1_CTRL__R8_UH_SETUP_MASK_UEP_R_RES_Pos (2UL)      /*!< MASK_UEP_R_RES (Bit 2)                                */
#define USB_R8_UEP1_CTRL__R8_UH_SETUP_MASK_UEP_R_RES_Msk (0xcUL)    /*!< MASK_UEP_R_RES (Bitfield-Mask: 0x03)                  */
#define USB_R8_UEP1_CTRL__R8_UH_SETUP_RB_UEP_AUTO_TOG_Pos (4UL)     /*!< RB_UEP_AUTO_TOG (Bit 4)                               */
#define USB_R8_UEP1_CTRL__R8_UH_SETUP_RB_UEP_AUTO_TOG_Msk (0x10UL)  /*!< RB_UEP_AUTO_TOG (Bitfield-Mask: 0x01)                 */
#define USB_R8_UEP1_CTRL__R8_UH_SETUP_RB_UEP_T_TOG__RB_UH_SOF_EN_Pos (6UL) /*!< RB_UEP_T_TOG__RB_UH_SOF_EN (Bit 6)             */
#define USB_R8_UEP1_CTRL__R8_UH_SETUP_RB_UEP_T_TOG__RB_UH_SOF_EN_Msk (0x40UL) /*!< RB_UEP_T_TOG__RB_UH_SOF_EN (Bitfield-Mask: 0x01) */
#define USB_R8_UEP1_CTRL__R8_UH_SETUP_RB_UEP_R_TOG__RB_UH_PRE_PID_EN_Pos (7UL) /*!< RB_UEP_R_TOG__RB_UH_PRE_PID_EN (Bit 7)     */
#define USB_R8_UEP1_CTRL__R8_UH_SETUP_RB_UEP_R_TOG__RB_UH_PRE_PID_EN_Msk (0x80UL) /*!< RB_UEP_R_TOG__RB_UH_PRE_PID_EN (Bitfield-Mask: 0x01) */
/* ==============================================  R8_UEP2_T_LEN__R8_UH_EP_PID  ============================================== */
#define USB_R8_UEP2_T_LEN__R8_UH_EP_PID_MASK_UH_ENDP_Pos (0UL)      /*!< MASK_UH_ENDP (Bit 0)                                  */
#define USB_R8_UEP2_T_LEN__R8_UH_EP_PID_MASK_UH_ENDP_Msk (0xfUL)    /*!< MASK_UH_ENDP (Bitfield-Mask: 0x0f)                    */
#define USB_R8_UEP2_T_LEN__R8_UH_EP_PID_MASK_UH_TOKEN_Pos (4UL)     /*!< MASK_UH_TOKEN (Bit 4)                                 */
#define USB_R8_UEP2_T_LEN__R8_UH_EP_PID_MASK_UH_TOKEN_Msk (0xf0UL)  /*!< MASK_UH_TOKEN (Bitfield-Mask: 0x0f)                   */
/* ==============================================  R8_UEP2_CTRL__R8_UH_RX_CTRL  ============================================== */
#define USB_R8_UEP2_CTRL__R8_UH_RX_CTRL_MASK_UEP_T_RES_Pos (0UL)    /*!< MASK_UEP_T_RES (Bit 0)                                */
#define USB_R8_UEP2_CTRL__R8_UH_RX_CTRL_MASK_UEP_T_RES_Msk (0x3UL)  /*!< MASK_UEP_T_RES (Bitfield-Mask: 0x03)                  */
#define USB_R8_UEP2_CTRL__R8_UH_RX_CTRL_MASK_UEP_R_RES_Pos (2UL)    /*!< MASK_UEP_R_RES (Bit 2)                                */
#define USB_R8_UEP2_CTRL__R8_UH_RX_CTRL_MASK_UEP_R_RES_Msk (0xcUL)  /*!< MASK_UEP_R_RES (Bitfield-Mask: 0x03)                  */
#define USB_R8_UEP2_CTRL__R8_UH_RX_CTRL_RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_Pos (4UL) /*!< RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG (Bit 4) */
#define USB_R8_UEP2_CTRL__R8_UH_RX_CTRL_RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG_Msk (0x10UL) /*!< RB_UEP_AUTO_TOG__RB_UH_R_AUTO_TOG (Bitfield-Mask: 0x01) */
#define USB_R8_UEP2_CTRL__R8_UH_RX_CTRL_RB_UEP_T_TOG_Pos (6UL)      /*!< RB_UEP_T_TOG (Bit 6)                                  */
#define USB_R8_UEP2_CTRL__R8_UH_RX_CTRL_RB_UEP_T_TOG_Msk (0x40UL)   /*!< RB_UEP_T_TOG (Bitfield-Mask: 0x01)                    */
#define USB_R8_UEP2_CTRL__R8_UH_RX_CTRL_RB_UEP_R_TOG__RB_UH_R_TOG_Pos (7UL) /*!< RB_UEP_R_TOG__RB_UH_R_TOG (Bit 7)             */
#define USB_R8_UEP2_CTRL__R8_UH_RX_CTRL_RB_UEP_R_TOG__RB_UH_R_TOG_Msk (0x80UL) /*!< RB_UEP_R_TOG__RB_UH_R_TOG (Bitfield-Mask: 0x01) */
/* ==============================================  R8_UEP3_T_LEN__R8_UH_TX_LEN  ============================================== */
/* ==============================================  R8_UEP3_CTRL__R8_UH_TX_CTRL  ============================================== */
#define USB_R8_UEP3_CTRL__R8_UH_TX_CTRL_MASK_UEP_T_RES_Pos (0UL)    /*!< MASK_UEP_T_RES (Bit 0)                                */
#define USB_R8_UEP3_CTRL__R8_UH_TX_CTRL_MASK_UEP_T_RES_Msk (0x3UL)  /*!< MASK_UEP_T_RES (Bitfield-Mask: 0x03)                  */
#define USB_R8_UEP3_CTRL__R8_UH_TX_CTRL_MASK_UEP_R_RES_Pos (2UL)    /*!< MASK_UEP_R_RES (Bit 2)                                */
#define USB_R8_UEP3_CTRL__R8_UH_TX_CTRL_MASK_UEP_R_RES_Msk (0xcUL)  /*!< MASK_UEP_R_RES (Bitfield-Mask: 0x03)                  */
#define USB_R8_UEP3_CTRL__R8_UH_TX_CTRL_RB_UEP_AUTO_TOG_Pos (4UL)   /*!< RB_UEP_AUTO_TOG (Bit 4)                               */
#define USB_R8_UEP3_CTRL__R8_UH_TX_CTRL_RB_UEP_AUTO_TOG_Msk (0x10UL) /*!< RB_UEP_AUTO_TOG (Bitfield-Mask: 0x01)                */
#define USB_R8_UEP3_CTRL__R8_UH_TX_CTRL_RB_UEP_T_TOG_Pos (6UL)      /*!< RB_UEP_T_TOG (Bit 6)                                  */
#define USB_R8_UEP3_CTRL__R8_UH_TX_CTRL_RB_UEP_T_TOG_Msk (0x40UL)   /*!< RB_UEP_T_TOG (Bitfield-Mask: 0x01)                    */
#define USB_R8_UEP3_CTRL__R8_UH_TX_CTRL_RB_UEP_R_TOG_Pos (7UL)      /*!< RB_UEP_R_TOG (Bit 7)                                  */
#define USB_R8_UEP3_CTRL__R8_UH_TX_CTRL_RB_UEP_R_TOG_Msk (0x80UL)   /*!< RB_UEP_R_TOG (Bitfield-Mask: 0x01)                    */
/* =====================================================  R8_UEP4_T_LEN  ===================================================== */
/* =====================================================  R8_UEP4_CTRL  ====================================================== */
#define USB_R8_UEP4_CTRL_MASK_UEP_T_RES_Pos (0UL)                   /*!< MASK_UEP_T_RES (Bit 0)                                */
#define USB_R8_UEP4_CTRL_MASK_UEP_T_RES_Msk (0x3UL)                 /*!< MASK_UEP_T_RES (Bitfield-Mask: 0x03)                  */
#define USB_R8_UEP4_CTRL_MASK_UEP_R_RES_Pos (2UL)                   /*!< MASK_UEP_R_RES (Bit 2)                                */
#define USB_R8_UEP4_CTRL_MASK_UEP_R_RES_Msk (0xcUL)                 /*!< MASK_UEP_R_RES (Bitfield-Mask: 0x03)                  */
#define USB_R8_UEP4_CTRL_RB_UEP_AUTO_TOG_Pos (4UL)                  /*!< RB_UEP_AUTO_TOG (Bit 4)                               */
#define USB_R8_UEP4_CTRL_RB_UEP_AUTO_TOG_Msk (0x10UL)               /*!< RB_UEP_AUTO_TOG (Bitfield-Mask: 0x01)                 */
#define USB_R8_UEP4_CTRL_RB_UEP_T_TOG_Pos (6UL)                     /*!< RB_UEP_T_TOG (Bit 6)                                  */
#define USB_R8_UEP4_CTRL_RB_UEP_T_TOG_Msk (0x40UL)                  /*!< RB_UEP_T_TOG (Bitfield-Mask: 0x01)                    */
#define USB_R8_UEP4_CTRL_RB_UEP_R_TOG_Pos (7UL)                     /*!< RB_UEP_R_TOG (Bit 7)                                  */
#define USB_R8_UEP4_CTRL_RB_UEP_R_TOG_Msk (0x80UL)                  /*!< RB_UEP_R_TOG (Bitfield-Mask: 0x01)                    */
/* ==================================================  R8_USB_TYPE_C_CTRL  =================================================== */
#define USB_R8_USB_TYPE_C_CTRL_RB_UCC1_PU_EN_Pos (0UL)              /*!< RB_UCC1_PU_EN (Bit 0)                                 */
#define USB_R8_USB_TYPE_C_CTRL_RB_UCC1_PU_EN_Msk (0x3UL)            /*!< RB_UCC1_PU_EN (Bitfield-Mask: 0x03)                   */
#define USB_R8_USB_TYPE_C_CTRL_RB_UCC1_PD_EN_Pos (2UL)              /*!< RB_UCC1_PD_EN (Bit 2)                                 */
#define USB_R8_USB_TYPE_C_CTRL_RB_UCC1_PD_EN_Msk (0x4UL)            /*!< RB_UCC1_PD_EN (Bitfield-Mask: 0x01)                   */
#define USB_R8_USB_TYPE_C_CTRL_RB_VBUS_PD_EN_Pos (3UL)              /*!< RB_VBUS_PD_EN (Bit 3)                                 */
#define USB_R8_USB_TYPE_C_CTRL_RB_VBUS_PD_EN_Msk (0x8UL)            /*!< RB_VBUS_PD_EN (Bitfield-Mask: 0x01)                   */
#define USB_R8_USB_TYPE_C_CTRL_RB_UCC2_PU_EN_Pos (4UL)              /*!< RB_UCC2_PU_EN (Bit 4)                                 */
#define USB_R8_USB_TYPE_C_CTRL_RB_UCC2_PU_EN_Msk (0x30UL)           /*!< RB_UCC2_PU_EN (Bitfield-Mask: 0x03)                   */
#define USB_R8_USB_TYPE_C_CTRL_RB_UCC2_PD_EN_Pos (6UL)              /*!< RB_UCC2_PD_EN (Bit 6)                                 */
#define USB_R8_USB_TYPE_C_CTRL_RB_UCC2_PD_EN_Msk (0x40UL)           /*!< RB_UCC2_PD_EN (Bitfield-Mask: 0x01)                   */
#define USB_R8_USB_TYPE_C_CTRL_RB_UTCC_GP_BIT_Pos (7UL)             /*!< RB_UTCC_GP_BIT (Bit 7)                                */
#define USB_R8_USB_TYPE_C_CTRL_RB_UTCC_GP_BIT_Msk (0x80UL)          /*!< RB_UTCC_GP_BIT (Bitfield-Mask: 0x01)                  */


/* =========================================================================================================================== */
/* ================                                            ETH                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  R8_ETH_EIE  ======================================================= */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_RXERIE_Pos (0UL)                  /*!< RB_ETH_EIE_RXERIE (Bit 0)                             */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_RXERIE_Msk (0x1UL)                /*!< RB_ETH_EIE_RXERIE (Bitfield-Mask: 0x01)               */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_TXERIE_Pos (1UL)                  /*!< RB_ETH_EIE_TXERIE (Bit 1)                             */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_TXERIE_Msk (0x2UL)                /*!< RB_ETH_EIE_TXERIE (Bitfield-Mask: 0x01)               */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_R_EN50_Pos (2UL)                  /*!< RB_ETH_EIE_R_EN50 (Bit 2)                             */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_R_EN50_Msk (0x4UL)                /*!< RB_ETH_EIE_R_EN50 (Bitfield-Mask: 0x01)               */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_TXIE_Pos (3UL)                    /*!< RB_ETH_EIE_TXIE (Bit 3)                               */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_TXIE_Msk (0x8UL)                  /*!< RB_ETH_EIE_TXIE (Bitfield-Mask: 0x01)                 */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_LINKIE_Pos (4UL)                  /*!< RB_ETH_EIE_LINKIE (Bit 4)                             */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_LINKIE_Msk (0x10UL)               /*!< RB_ETH_EIE_LINKIE (Bitfield-Mask: 0x01)               */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_RXIE_Pos (6UL)                    /*!< RB_ETH_EIE_RXIE (Bit 6)                               */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_RXIE_Msk (0x40UL)                 /*!< RB_ETH_EIE_RXIE (Bitfield-Mask: 0x01)                 */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_INTIE_Pos (7UL)                   /*!< RB_ETH_EIE_INTIE (Bit 7)                              */
#define ETH_R8_ETH_EIE_RB_ETH_EIE_INTIE_Msk (0x80UL)                /*!< RB_ETH_EIE_INTIE (Bitfield-Mask: 0x01)                */
/* ======================================================  R8_ETH_EIR  ======================================================= */
#define ETH_R8_ETH_EIR_RB_ETH_EIR_RXERIF_Pos (0UL)                  /*!< RB_ETH_EIR_RXERIF (Bit 0)                             */
#define ETH_R8_ETH_EIR_RB_ETH_EIR_RXERIF_Msk (0x1UL)                /*!< RB_ETH_EIR_RXERIF (Bitfield-Mask: 0x01)               */
#define ETH_R8_ETH_EIR_RB_ETH_EIR_TXERIF_Pos (1UL)                  /*!< RB_ETH_EIR_TXERIF (Bit 1)                             */
#define ETH_R8_ETH_EIR_RB_ETH_EIR_TXERIF_Msk (0x2UL)                /*!< RB_ETH_EIR_TXERIF (Bitfield-Mask: 0x01)               */
#define ETH_R8_ETH_EIR_RB_ETH_EIR_TXIF_Pos (3UL)                    /*!< RB_ETH_EIR_TXIF (Bit 3)                               */
#define ETH_R8_ETH_EIR_RB_ETH_EIR_TXIF_Msk (0x8UL)                  /*!< RB_ETH_EIR_TXIF (Bitfield-Mask: 0x01)                 */
#define ETH_R8_ETH_EIR_RB_ETH_EIR_LINKIF_Pos (4UL)                  /*!< RB_ETH_EIR_LINKIF (Bit 4)                             */
#define ETH_R8_ETH_EIR_RB_ETH_EIR_LINKIF_Msk (0x10UL)               /*!< RB_ETH_EIR_LINKIF (Bitfield-Mask: 0x01)               */
#define ETH_R8_ETH_EIR_RB_ETH_EIR_RXIF_Pos (6UL)                    /*!< RB_ETH_EIR_RXIF (Bit 6)                               */
#define ETH_R8_ETH_EIR_RB_ETH_EIR_RXIF_Msk (0x40UL)                 /*!< RB_ETH_EIR_RXIF (Bitfield-Mask: 0x01)                 */
/* =====================================================  R8_ETH_ESTAT  ====================================================== */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_TXABRT_Pos (1UL)              /*!< RB_ETH_ESTAT_TXABRT (Bit 1)                           */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_TXABRT_Msk (0x2UL)            /*!< RB_ETH_ESTAT_TXABRT (Bitfield-Mask: 0x01)             */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_RXBUSY_Pos (2UL)              /*!< RB_ETH_ESTAT_RXBUSY (Bit 2)                           */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_RXBUSY_Msk (0x4UL)            /*!< RB_ETH_ESTAT_RXBUSY (Bitfield-Mask: 0x01)             */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_RXMORE_Pos (3UL)              /*!< RB_ETH_ESTAT_RXMORE (Bit 3)                           */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_RXMORE_Msk (0x8UL)            /*!< RB_ETH_ESTAT_RXMORE (Bitfield-Mask: 0x01)             */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_RXNIBBLE_Pos (4UL)            /*!< RB_ETH_ESTAT_RXNIBBLE (Bit 4)                         */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_RXNIBBLE_Msk (0x10UL)         /*!< RB_ETH_ESTAT_RXNIBBLE (Bitfield-Mask: 0x01)           */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_RXCRCER_Pos (5UL)             /*!< RB_ETH_ESTAT_RXCRCER (Bit 5)                          */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_RXCRCER_Msk (0x20UL)          /*!< RB_ETH_ESTAT_RXCRCER (Bitfield-Mask: 0x01)            */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_BUFER_Pos (6UL)               /*!< RB_ETH_ESTAT_BUFER (Bit 6)                            */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_BUFER_Msk (0x40UL)            /*!< RB_ETH_ESTAT_BUFER (Bitfield-Mask: 0x01)              */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_INT_Pos (7UL)                 /*!< RB_ETH_ESTAT_INT (Bit 7)                              */
#define ETH_R8_ETH_ESTAT_RB_ETH_ESTAT_INT_Msk (0x80UL)              /*!< RB_ETH_ESTAT_INT (Bitfield-Mask: 0x01)                */
/* =====================================================  R8_ETH_ECON2  ====================================================== */
#define ETH_R8_ETH_ECON2_RB_ETH_ECON2_TX_Pos (0UL)                  /*!< RB_ETH_ECON2_TX (Bit 0)                               */
#define ETH_R8_ETH_ECON2_RB_ETH_ECON2_TX_Msk (0x1UL)                /*!< RB_ETH_ECON2_TX (Bitfield-Mask: 0x01)                 */
#define ETH_R8_ETH_ECON2_RB_ETH_ECON2_RX_Pos (1UL)                  /*!< RB_ETH_ECON2_RX (Bit 1)                               */
#define ETH_R8_ETH_ECON2_RB_ETH_ECON2_RX_Msk (0xeUL)                /*!< RB_ETH_ECON2_RX (Bitfield-Mask: 0x07)                 */
/* =====================================================  R8_ETH_ECON1  ====================================================== */
#define ETH_R8_ETH_ECON1_RB_ETH_ECON1_RXEN_Pos (2UL)                /*!< RB_ETH_ECON1_RXEN (Bit 2)                             */
#define ETH_R8_ETH_ECON1_RB_ETH_ECON1_RXEN_Msk (0x4UL)              /*!< RB_ETH_ECON1_RXEN (Bitfield-Mask: 0x01)               */
#define ETH_R8_ETH_ECON1_RB_ETH_ECON1_TXRTS_Pos (3UL)               /*!< RB_ETH_ECON1_TXRTS (Bit 3)                            */
#define ETH_R8_ETH_ECON1_RB_ETH_ECON1_TXRTS_Msk (0x8UL)             /*!< RB_ETH_ECON1_TXRTS (Bitfield-Mask: 0x01)              */
#define ETH_R8_ETH_ECON1_RB_ETH_ECON1_RXRST_Pos (6UL)               /*!< RB_ETH_ECON1_RXRST (Bit 6)                            */
#define ETH_R8_ETH_ECON1_RB_ETH_ECON1_RXRST_Msk (0x40UL)            /*!< RB_ETH_ECON1_RXRST (Bitfield-Mask: 0x01)              */
#define ETH_R8_ETH_ECON1_RB_ETH_ECON1_TXRST_Pos (7UL)               /*!< RB_ETH_ECON1_TXRST (Bit 7)                            */
#define ETH_R8_ETH_ECON1_RB_ETH_ECON1_TXRST_Msk (0x80UL)            /*!< RB_ETH_ECON1_TXRST (Bitfield-Mask: 0x01)              */
/* =====================================================  R16_ETH_ETXST  ===================================================== */
/* =====================================================  R16_ETH_ETXLN  ===================================================== */
/* =====================================================  R16_ETH_ERXST  ===================================================== */
/* =====================================================  R16_ETH_ERXLN  ===================================================== */
/* ======================================================  R8_ETH_EHT0  ====================================================== */
/* ======================================================  R8_ETH_EHT1  ====================================================== */
/* ======================================================  R8_ETH_EHT2  ====================================================== */
/* ======================================================  R8_ETH_EHT3  ====================================================== */
/* ======================================================  R8_ETH_EHT4  ====================================================== */
/* ======================================================  R8_ETH_EHT5  ====================================================== */
/* ======================================================  R8_ETH_EHT6  ====================================================== */
/* ======================================================  R8_ETH_EHT7  ====================================================== */
/* ====================================================  R8_ETH_ERXFCON  ===================================================== */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_BCEN_Pos (0UL)            /*!< RB_ETH_ERXFCON_BCEN (Bit 0)                           */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_BCEN_Msk (0x1UL)          /*!< RB_ETH_ERXFCON_BCEN (Bitfield-Mask: 0x01)             */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_MCEN_Pos (1UL)            /*!< RB_ETH_ERXFCON_MCEN (Bit 1)                           */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_MCEN_Msk (0x2UL)          /*!< RB_ETH_ERXFCON_MCEN (Bitfield-Mask: 0x01)             */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_HTEN_Pos (2UL)            /*!< RB_ETH_ERXFCON_HTEN (Bit 2)                           */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_HTEN_Msk (0x4UL)          /*!< RB_ETH_ERXFCON_HTEN (Bitfield-Mask: 0x01)             */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_MPEN_Pos (3UL)            /*!< RB_ETH_ERXFCON_MPEN (Bit 3)                           */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_MPEN_Msk (0x8UL)          /*!< RB_ETH_ERXFCON_MPEN (Bitfield-Mask: 0x01)             */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_CRCEN_Pos (5UL)           /*!< RB_ETH_ERXFCON_CRCEN (Bit 5)                          */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_CRCEN_Msk (0x20UL)        /*!< RB_ETH_ERXFCON_CRCEN (Bitfield-Mask: 0x01)            */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_ANDOR_Pos (6UL)           /*!< RB_ETH_ERXFCON_ANDOR (Bit 6)                          */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_ANDOR_Msk (0x40UL)        /*!< RB_ETH_ERXFCON_ANDOR (Bitfield-Mask: 0x01)            */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_UCEN_Pos (7UL)            /*!< RB_ETH_ERXFCON_UCEN (Bit 7)                           */
#define ETH_R8_ETH_ERXFCON_RB_ETH_ERXFCON_UCEN_Msk (0x80UL)         /*!< RB_ETH_ERXFCON_UCEN (Bitfield-Mask: 0x01)             */
/* =====================================================  R8_ETH_MACON1  ===================================================== */
#define ETH_R8_ETH_MACON1_RB_ETH_MACON1_MARXEN_Pos (0UL)            /*!< RB_ETH_MACON1_MARXEN (Bit 0)                          */
#define ETH_R8_ETH_MACON1_RB_ETH_MACON1_MARXEN_Msk (0x1UL)          /*!< RB_ETH_MACON1_MARXEN (Bitfield-Mask: 0x01)            */
#define ETH_R8_ETH_MACON1_RB_ETH_MACON1_PASSALL_Pos (1UL)           /*!< RB_ETH_MACON1_PASSALL (Bit 1)                         */
#define ETH_R8_ETH_MACON1_RB_ETH_MACON1_PASSALL_Msk (0x2UL)         /*!< RB_ETH_MACON1_PASSALL (Bitfield-Mask: 0x01)           */
#define ETH_R8_ETH_MACON1_RB_ETH_MACON1_RXPAUS_Pos (2UL)            /*!< RB_ETH_MACON1_RXPAUS (Bit 2)                          */
#define ETH_R8_ETH_MACON1_RB_ETH_MACON1_RXPAUS_Msk (0x4UL)          /*!< RB_ETH_MACON1_RXPAUS (Bitfield-Mask: 0x01)            */
#define ETH_R8_ETH_MACON1_RB_ETH_MACON1_TXPAUS_Pos (3UL)            /*!< RB_ETH_MACON1_TXPAUS (Bit 3)                          */
#define ETH_R8_ETH_MACON1_RB_ETH_MACON1_TXPAUS_Msk (0x8UL)          /*!< RB_ETH_MACON1_TXPAUS (Bitfield-Mask: 0x01)            */
#define ETH_R8_ETH_MACON1_RB_ETH_MACON1_FCEN_Pos (4UL)              /*!< RB_ETH_MACON1_FCEN (Bit 4)                            */
#define ETH_R8_ETH_MACON1_RB_ETH_MACON1_FCEN_Msk (0x30UL)           /*!< RB_ETH_MACON1_FCEN (Bitfield-Mask: 0x03)              */
/* =====================================================  R8_ETH_MACON2  ===================================================== */
#define ETH_R8_ETH_MACON2_RB_ETH_MACON2_FULDPX_Pos (0UL)            /*!< RB_ETH_MACON2_FULDPX (Bit 0)                          */
#define ETH_R8_ETH_MACON2_RB_ETH_MACON2_FULDPX_Msk (0x1UL)          /*!< RB_ETH_MACON2_FULDPX (Bitfield-Mask: 0x01)            */
#define ETH_R8_ETH_MACON2_RB_ETH_MACON2_HFRMEN_Pos (2UL)            /*!< RB_ETH_MACON2_HFRMEN (Bit 2)                          */
#define ETH_R8_ETH_MACON2_RB_ETH_MACON2_HFRMEN_Msk (0x4UL)          /*!< RB_ETH_MACON2_HFRMEN (Bitfield-Mask: 0x01)            */
#define ETH_R8_ETH_MACON2_RB_ETH_MACON2_PHDREN_Pos (3UL)            /*!< RB_ETH_MACON2_PHDREN (Bit 3)                          */
#define ETH_R8_ETH_MACON2_RB_ETH_MACON2_PHDREN_Msk (0x8UL)          /*!< RB_ETH_MACON2_PHDREN (Bitfield-Mask: 0x01)            */
#define ETH_R8_ETH_MACON2_RB_ETH_MACON2_TXCRCEN_Pos (4UL)           /*!< RB_ETH_MACON2_TXCRCEN (Bit 4)                         */
#define ETH_R8_ETH_MACON2_RB_ETH_MACON2_TXCRCEN_Msk (0x10UL)        /*!< RB_ETH_MACON2_TXCRCEN (Bitfield-Mask: 0x01)           */
#define ETH_R8_ETH_MACON2_RB_ETH_MACON2_PADCFG_Pos (5UL)            /*!< RB_ETH_MACON2_PADCFG (Bit 5)                          */
#define ETH_R8_ETH_MACON2_RB_ETH_MACON2_PADCFG_Msk (0xe0UL)         /*!< RB_ETH_MACON2_PADCFG (Bitfield-Mask: 0x07)            */
/* ====================================================  R8_ETH_MABBIPG  ===================================================== */
#define ETH_R8_ETH_MABBIPG_RB_ETH_MABBIPG_MABBIPG_Pos (0UL)         /*!< RB_ETH_MABBIPG_MABBIPG (Bit 0)                        */
#define ETH_R8_ETH_MABBIPG_RB_ETH_MABBIPG_MABBIPG_Msk (0x7fUL)      /*!< RB_ETH_MABBIPG_MABBIPG (Bitfield-Mask: 0x7f)          */
/* =====================================================  R16_ETH_EPAUS  ===================================================== */
/* ====================================================  R16_ETH_MAMXFL  ===================================================== */
/* =====================================================  R16_ETH_MIRD  ====================================================== */
/* ====================================================  R8_ETH_MIREGADR  ==================================================== */
#define ETH_R8_ETH_MIREGADR_RB_ETH_MIREGADR_MASK_Pos (0UL)          /*!< RB_ETH_MIREGADR_MASK (Bit 0)                          */
#define ETH_R8_ETH_MIREGADR_RB_ETH_MIREGADR_MASK_Msk (0x1fUL)       /*!< RB_ETH_MIREGADR_MASK (Bitfield-Mask: 0x1f)            */
/* =====================================================  R8_ETH_MISTAT  ===================================================== */
/* =====================================================  R16_ETH_MIWR  ====================================================== */
/* ====================================================  R32_ETH_MAADRL  ===================================================== */
/* ====================================================  R16_ETH_MAADRH  ===================================================== */

/** @} */ /* End of group PosMask_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* CH579SFR_H */


/** @} */ /* End of group CH579SFR */

/** @} */ /* End of group WCH Ltd. */
